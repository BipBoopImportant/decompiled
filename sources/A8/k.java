package a8;

import a8.C6752b;
import a8.e;
import a8.g;
import android.graphics.Matrix;
import android.util.Log;
import androidx.recyclerview.widget.RecyclerView;
import com.adjust.sdk.Constants;
import com.oppwa.mobile.connect.BuildConfig;
import d9.M;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.zip.GZIPInputStream;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xmlpull.v1.XmlPullParser;

class k {

    /* renamed from: a  reason: collision with root package name */
    private g f41841a = null;

    /* renamed from: b  reason: collision with root package name */
    private g.J f41842b = null;

    /* renamed from: c  reason: collision with root package name */
    private boolean f41843c = false;

    /* renamed from: d  reason: collision with root package name */
    private int f41844d;

    /* renamed from: e  reason: collision with root package name */
    private boolean f41845e = false;

    /* renamed from: f  reason: collision with root package name */
    private h f41846f = null;

    /* renamed from: g  reason: collision with root package name */
    private StringBuilder f41847g = null;

    /* renamed from: h  reason: collision with root package name */
    private boolean f41848h = false;

    /* renamed from: i  reason: collision with root package name */
    private StringBuilder f41849i = null;

    static /* synthetic */ class a {

        /* renamed from: a  reason: collision with root package name */
        static final /* synthetic */ int[] f41850a;

        /* renamed from: b  reason: collision with root package name */
        static final /* synthetic */ int[] f41851b;

        /* JADX WARNING: Can't wrap try/catch for region: R(240:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|(2:77|78)|79|(2:81|82)|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(241:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|(2:77|78)|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(242:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(243:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(244:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(245:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(246:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(247:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(248:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(249:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(250:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(251:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(253:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(254:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(255:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(256:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(257:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(258:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(259:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(260:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(261:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(262:0|(2:1|2)|3|(2:5|6)|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(263:0|(2:1|2)|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(264:0|1|2|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:101:0x015c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:103:0x0168 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:105:0x0174 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:107:0x0180 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:109:0x018c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:111:0x0198 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:113:0x01a4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:115:0x01b0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:117:0x01bc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:119:0x01c8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:121:0x01d4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:123:0x01e0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:125:0x01ec */
        /* JADX WARNING: Missing exception handler attribute for start block: B:127:0x01f8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:129:0x0204 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:131:0x0210 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:133:0x021c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:135:0x0228 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:137:0x0234 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:139:0x0240 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:141:0x024c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:143:0x0258 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:145:0x0264 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:147:0x0270 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:149:0x027c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:151:0x0288 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:153:0x0294 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:155:0x02a0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:157:0x02ac */
        /* JADX WARNING: Missing exception handler attribute for start block: B:159:0x02b8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:161:0x02c4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:163:0x02d0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:165:0x02dc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:167:0x02e8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:169:0x02f4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:171:0x0300 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:173:0x030c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:175:0x0318 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:177:0x0324 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:179:0x0330 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:181:0x033c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:183:0x0348 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:185:0x0354 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:187:0x0360 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:189:0x036c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:191:0x0378 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:193:0x0384 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:195:0x0390 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:197:0x039c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:199:0x03a8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:201:0x03b4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:203:0x03c0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:205:0x03cc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:207:0x03d8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:209:0x03e4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:211:0x03f0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:213:0x03fc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:215:0x0408 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:217:0x0414 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:219:0x0420 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:225:0x043d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:227:0x0447 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:229:0x0451 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:231:0x045b */
        /* JADX WARNING: Missing exception handler attribute for start block: B:233:0x0465 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:235:0x046f */
        /* JADX WARNING: Missing exception handler attribute for start block: B:237:0x0479 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:239:0x0483 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:241:0x048d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:243:0x0497 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:245:0x04a1 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:247:0x04ab */
        /* JADX WARNING: Missing exception handler attribute for start block: B:249:0x04b5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:251:0x04bf */
        /* JADX WARNING: Missing exception handler attribute for start block: B:253:0x04c9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:255:0x04d5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:257:0x04df */
        /* JADX WARNING: Missing exception handler attribute for start block: B:259:0x04e9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:261:0x04f3 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:263:0x04fd */
        /* JADX WARNING: Missing exception handler attribute for start block: B:265:0x0507 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:267:0x0511 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:269:0x051d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:271:0x0529 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:273:0x0535 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:275:0x0541 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:277:0x054d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:279:0x0559 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:281:0x0565 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:283:0x0571 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:87:0x0108 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:89:0x0114 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:91:0x0120 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:93:0x012c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:95:0x0138 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:97:0x0144 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:99:0x0150 */
        static {
            /*
                a8.k$g[] r0 = a8.k.g.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                f41851b = r0
                r1 = 1
                a8.k$g r2 = a8.k.g.x     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r2 = r2.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0[r2] = r1     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                r0 = 2
                int[] r2 = f41851b     // Catch:{ NoSuchFieldError -> 0x001d }
                a8.k$g r3 = a8.k.g.y     // Catch:{ NoSuchFieldError -> 0x001d }
                int r3 = r3.ordinal()     // Catch:{ NoSuchFieldError -> 0x001d }
                r2[r3] = r0     // Catch:{ NoSuchFieldError -> 0x001d }
            L_0x001d:
                r2 = 3
                int[] r3 = f41851b     // Catch:{ NoSuchFieldError -> 0x0028 }
                a8.k$g r4 = a8.k.g.width     // Catch:{ NoSuchFieldError -> 0x0028 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0028 }
                r3[r4] = r2     // Catch:{ NoSuchFieldError -> 0x0028 }
            L_0x0028:
                r3 = 4
                int[] r4 = f41851b     // Catch:{ NoSuchFieldError -> 0x0033 }
                a8.k$g r5 = a8.k.g.height     // Catch:{ NoSuchFieldError -> 0x0033 }
                int r5 = r5.ordinal()     // Catch:{ NoSuchFieldError -> 0x0033 }
                r4[r5] = r3     // Catch:{ NoSuchFieldError -> 0x0033 }
            L_0x0033:
                r4 = 5
                int[] r5 = f41851b     // Catch:{ NoSuchFieldError -> 0x003e }
                a8.k$g r6 = a8.k.g.version     // Catch:{ NoSuchFieldError -> 0x003e }
                int r6 = r6.ordinal()     // Catch:{ NoSuchFieldError -> 0x003e }
                r5[r6] = r4     // Catch:{ NoSuchFieldError -> 0x003e }
            L_0x003e:
                r5 = 6
                int[] r6 = f41851b     // Catch:{ NoSuchFieldError -> 0x0049 }
                a8.k$g r7 = a8.k.g.href     // Catch:{ NoSuchFieldError -> 0x0049 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0049 }
                r6[r7] = r5     // Catch:{ NoSuchFieldError -> 0x0049 }
            L_0x0049:
                r6 = 7
                int[] r7 = f41851b     // Catch:{ NoSuchFieldError -> 0x0054 }
                a8.k$g r8 = a8.k.g.preserveAspectRatio     // Catch:{ NoSuchFieldError -> 0x0054 }
                int r8 = r8.ordinal()     // Catch:{ NoSuchFieldError -> 0x0054 }
                r7[r8] = r6     // Catch:{ NoSuchFieldError -> 0x0054 }
            L_0x0054:
                r7 = 8
                int[] r8 = f41851b     // Catch:{ NoSuchFieldError -> 0x0060 }
                a8.k$g r9 = a8.k.g.d     // Catch:{ NoSuchFieldError -> 0x0060 }
                int r9 = r9.ordinal()     // Catch:{ NoSuchFieldError -> 0x0060 }
                r8[r9] = r7     // Catch:{ NoSuchFieldError -> 0x0060 }
            L_0x0060:
                r8 = 9
                int[] r9 = f41851b     // Catch:{ NoSuchFieldError -> 0x006c }
                a8.k$g r10 = a8.k.g.pathLength     // Catch:{ NoSuchFieldError -> 0x006c }
                int r10 = r10.ordinal()     // Catch:{ NoSuchFieldError -> 0x006c }
                r9[r10] = r8     // Catch:{ NoSuchFieldError -> 0x006c }
            L_0x006c:
                r9 = 10
                int[] r10 = f41851b     // Catch:{ NoSuchFieldError -> 0x0078 }
                a8.k$g r11 = a8.k.g.rx     // Catch:{ NoSuchFieldError -> 0x0078 }
                int r11 = r11.ordinal()     // Catch:{ NoSuchFieldError -> 0x0078 }
                r10[r11] = r9     // Catch:{ NoSuchFieldError -> 0x0078 }
            L_0x0078:
                r10 = 11
                int[] r11 = f41851b     // Catch:{ NoSuchFieldError -> 0x0084 }
                a8.k$g r12 = a8.k.g.ry     // Catch:{ NoSuchFieldError -> 0x0084 }
                int r12 = r12.ordinal()     // Catch:{ NoSuchFieldError -> 0x0084 }
                r11[r12] = r10     // Catch:{ NoSuchFieldError -> 0x0084 }
            L_0x0084:
                r11 = 12
                int[] r12 = f41851b     // Catch:{ NoSuchFieldError -> 0x0090 }
                a8.k$g r13 = a8.k.g.cx     // Catch:{ NoSuchFieldError -> 0x0090 }
                int r13 = r13.ordinal()     // Catch:{ NoSuchFieldError -> 0x0090 }
                r12[r13] = r11     // Catch:{ NoSuchFieldError -> 0x0090 }
            L_0x0090:
                r12 = 13
                int[] r13 = f41851b     // Catch:{ NoSuchFieldError -> 0x009c }
                a8.k$g r14 = a8.k.g.cy     // Catch:{ NoSuchFieldError -> 0x009c }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x009c }
                r13[r14] = r12     // Catch:{ NoSuchFieldError -> 0x009c }
            L_0x009c:
                r13 = 14
                int[] r14 = f41851b     // Catch:{ NoSuchFieldError -> 0x00a8 }
                a8.k$g r15 = a8.k.g.r     // Catch:{ NoSuchFieldError -> 0x00a8 }
                int r15 = r15.ordinal()     // Catch:{ NoSuchFieldError -> 0x00a8 }
                r14[r15] = r13     // Catch:{ NoSuchFieldError -> 0x00a8 }
            L_0x00a8:
                r14 = 15
                int[] r15 = f41851b     // Catch:{ NoSuchFieldError -> 0x00b4 }
                a8.k$g r16 = a8.k.g.x1     // Catch:{ NoSuchFieldError -> 0x00b4 }
                int r16 = r16.ordinal()     // Catch:{ NoSuchFieldError -> 0x00b4 }
                r15[r16] = r14     // Catch:{ NoSuchFieldError -> 0x00b4 }
            L_0x00b4:
                r15 = 16
                int[] r16 = f41851b     // Catch:{ NoSuchFieldError -> 0x00c0 }
                a8.k$g r17 = a8.k.g.y1     // Catch:{ NoSuchFieldError -> 0x00c0 }
                int r17 = r17.ordinal()     // Catch:{ NoSuchFieldError -> 0x00c0 }
                r16[r17] = r15     // Catch:{ NoSuchFieldError -> 0x00c0 }
            L_0x00c0:
                r16 = 17
                int[] r17 = f41851b     // Catch:{ NoSuchFieldError -> 0x00cc }
                a8.k$g r18 = a8.k.g.x2     // Catch:{ NoSuchFieldError -> 0x00cc }
                int r18 = r18.ordinal()     // Catch:{ NoSuchFieldError -> 0x00cc }
                r17[r18] = r16     // Catch:{ NoSuchFieldError -> 0x00cc }
            L_0x00cc:
                r17 = 18
                int[] r18 = f41851b     // Catch:{ NoSuchFieldError -> 0x00d8 }
                a8.k$g r19 = a8.k.g.y2     // Catch:{ NoSuchFieldError -> 0x00d8 }
                int r19 = r19.ordinal()     // Catch:{ NoSuchFieldError -> 0x00d8 }
                r18[r19] = r17     // Catch:{ NoSuchFieldError -> 0x00d8 }
            L_0x00d8:
                r18 = 19
                int[] r19 = f41851b     // Catch:{ NoSuchFieldError -> 0x00e4 }
                a8.k$g r20 = a8.k.g.dx     // Catch:{ NoSuchFieldError -> 0x00e4 }
                int r20 = r20.ordinal()     // Catch:{ NoSuchFieldError -> 0x00e4 }
                r19[r20] = r18     // Catch:{ NoSuchFieldError -> 0x00e4 }
            L_0x00e4:
                r19 = 20
                int[] r20 = f41851b     // Catch:{ NoSuchFieldError -> 0x00f0 }
                a8.k$g r21 = a8.k.g.dy     // Catch:{ NoSuchFieldError -> 0x00f0 }
                int r21 = r21.ordinal()     // Catch:{ NoSuchFieldError -> 0x00f0 }
                r20[r21] = r19     // Catch:{ NoSuchFieldError -> 0x00f0 }
            L_0x00f0:
                r20 = 21
                int[] r21 = f41851b     // Catch:{ NoSuchFieldError -> 0x00fc }
                a8.k$g r22 = a8.k.g.requiredFeatures     // Catch:{ NoSuchFieldError -> 0x00fc }
                int r22 = r22.ordinal()     // Catch:{ NoSuchFieldError -> 0x00fc }
                r21[r22] = r20     // Catch:{ NoSuchFieldError -> 0x00fc }
            L_0x00fc:
                r21 = 22
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0108 }
                a8.k$g r23 = a8.k.g.requiredExtensions     // Catch:{ NoSuchFieldError -> 0x0108 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0108 }
                r22[r23] = r21     // Catch:{ NoSuchFieldError -> 0x0108 }
            L_0x0108:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0114 }
                a8.k$g r23 = a8.k.g.systemLanguage     // Catch:{ NoSuchFieldError -> 0x0114 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0114 }
                r24 = 23
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0114 }
            L_0x0114:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0120 }
                a8.k$g r23 = a8.k.g.requiredFormats     // Catch:{ NoSuchFieldError -> 0x0120 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0120 }
                r24 = 24
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0120 }
            L_0x0120:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x012c }
                a8.k$g r23 = a8.k.g.requiredFonts     // Catch:{ NoSuchFieldError -> 0x012c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x012c }
                r24 = 25
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x012c }
            L_0x012c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0138 }
                a8.k$g r23 = a8.k.g.refX     // Catch:{ NoSuchFieldError -> 0x0138 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0138 }
                r24 = 26
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0138 }
            L_0x0138:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0144 }
                a8.k$g r23 = a8.k.g.refY     // Catch:{ NoSuchFieldError -> 0x0144 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0144 }
                r24 = 27
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0144 }
            L_0x0144:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0150 }
                a8.k$g r23 = a8.k.g.markerWidth     // Catch:{ NoSuchFieldError -> 0x0150 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0150 }
                r24 = 28
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0150 }
            L_0x0150:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x015c }
                a8.k$g r23 = a8.k.g.markerHeight     // Catch:{ NoSuchFieldError -> 0x015c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x015c }
                r24 = 29
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x015c }
            L_0x015c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0168 }
                a8.k$g r23 = a8.k.g.markerUnits     // Catch:{ NoSuchFieldError -> 0x0168 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0168 }
                r24 = 30
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0168 }
            L_0x0168:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0174 }
                a8.k$g r23 = a8.k.g.orient     // Catch:{ NoSuchFieldError -> 0x0174 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0174 }
                r24 = 31
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0174 }
            L_0x0174:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0180 }
                a8.k$g r23 = a8.k.g.gradientUnits     // Catch:{ NoSuchFieldError -> 0x0180 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0180 }
                r24 = 32
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0180 }
            L_0x0180:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x018c }
                a8.k$g r23 = a8.k.g.gradientTransform     // Catch:{ NoSuchFieldError -> 0x018c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x018c }
                r24 = 33
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x018c }
            L_0x018c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0198 }
                a8.k$g r23 = a8.k.g.spreadMethod     // Catch:{ NoSuchFieldError -> 0x0198 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0198 }
                r24 = 34
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0198 }
            L_0x0198:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01a4 }
                a8.k$g r23 = a8.k.g.fx     // Catch:{ NoSuchFieldError -> 0x01a4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01a4 }
                r24 = 35
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01a4 }
            L_0x01a4:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01b0 }
                a8.k$g r23 = a8.k.g.fy     // Catch:{ NoSuchFieldError -> 0x01b0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01b0 }
                r24 = 36
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01b0 }
            L_0x01b0:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01bc }
                a8.k$g r23 = a8.k.g.offset     // Catch:{ NoSuchFieldError -> 0x01bc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01bc }
                r24 = 37
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01bc }
            L_0x01bc:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01c8 }
                a8.k$g r23 = a8.k.g.clipPathUnits     // Catch:{ NoSuchFieldError -> 0x01c8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01c8 }
                r24 = 38
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01c8 }
            L_0x01c8:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01d4 }
                a8.k$g r23 = a8.k.g.startOffset     // Catch:{ NoSuchFieldError -> 0x01d4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01d4 }
                r24 = 39
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01d4 }
            L_0x01d4:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01e0 }
                a8.k$g r23 = a8.k.g.patternUnits     // Catch:{ NoSuchFieldError -> 0x01e0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01e0 }
                r24 = 40
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01e0 }
            L_0x01e0:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01ec }
                a8.k$g r23 = a8.k.g.patternContentUnits     // Catch:{ NoSuchFieldError -> 0x01ec }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ec }
                r24 = 41
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01ec }
            L_0x01ec:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x01f8 }
                a8.k$g r23 = a8.k.g.patternTransform     // Catch:{ NoSuchFieldError -> 0x01f8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01f8 }
                r24 = 42
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01f8 }
            L_0x01f8:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0204 }
                a8.k$g r23 = a8.k.g.maskUnits     // Catch:{ NoSuchFieldError -> 0x0204 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0204 }
                r24 = 43
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0204 }
            L_0x0204:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0210 }
                a8.k$g r23 = a8.k.g.maskContentUnits     // Catch:{ NoSuchFieldError -> 0x0210 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0210 }
                r24 = 44
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0210 }
            L_0x0210:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x021c }
                a8.k$g r23 = a8.k.g.style     // Catch:{ NoSuchFieldError -> 0x021c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x021c }
                r24 = 45
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x021c }
            L_0x021c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0228 }
                a8.k$g r23 = a8.k.g.CLASS     // Catch:{ NoSuchFieldError -> 0x0228 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0228 }
                r24 = 46
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0228 }
            L_0x0228:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0234 }
                a8.k$g r23 = a8.k.g.fill     // Catch:{ NoSuchFieldError -> 0x0234 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0234 }
                r24 = 47
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0234 }
            L_0x0234:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0240 }
                a8.k$g r23 = a8.k.g.fill_rule     // Catch:{ NoSuchFieldError -> 0x0240 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0240 }
                r24 = 48
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0240 }
            L_0x0240:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x024c }
                a8.k$g r23 = a8.k.g.fill_opacity     // Catch:{ NoSuchFieldError -> 0x024c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x024c }
                r24 = 49
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x024c }
            L_0x024c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0258 }
                a8.k$g r23 = a8.k.g.stroke     // Catch:{ NoSuchFieldError -> 0x0258 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0258 }
                r24 = 50
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0258 }
            L_0x0258:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0264 }
                a8.k$g r23 = a8.k.g.stroke_opacity     // Catch:{ NoSuchFieldError -> 0x0264 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0264 }
                r24 = 51
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0264 }
            L_0x0264:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0270 }
                a8.k$g r23 = a8.k.g.stroke_width     // Catch:{ NoSuchFieldError -> 0x0270 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0270 }
                r24 = 52
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0270 }
            L_0x0270:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x027c }
                a8.k$g r23 = a8.k.g.stroke_linecap     // Catch:{ NoSuchFieldError -> 0x027c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x027c }
                r24 = 53
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x027c }
            L_0x027c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0288 }
                a8.k$g r23 = a8.k.g.stroke_linejoin     // Catch:{ NoSuchFieldError -> 0x0288 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0288 }
                r24 = 54
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0288 }
            L_0x0288:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0294 }
                a8.k$g r23 = a8.k.g.stroke_miterlimit     // Catch:{ NoSuchFieldError -> 0x0294 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0294 }
                r24 = 55
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0294 }
            L_0x0294:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02a0 }
                a8.k$g r23 = a8.k.g.stroke_dasharray     // Catch:{ NoSuchFieldError -> 0x02a0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02a0 }
                r24 = 56
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02a0 }
            L_0x02a0:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02ac }
                a8.k$g r23 = a8.k.g.stroke_dashoffset     // Catch:{ NoSuchFieldError -> 0x02ac }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ac }
                r24 = 57
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02ac }
            L_0x02ac:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02b8 }
                a8.k$g r23 = a8.k.g.opacity     // Catch:{ NoSuchFieldError -> 0x02b8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02b8 }
                r24 = 58
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02b8 }
            L_0x02b8:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02c4 }
                a8.k$g r23 = a8.k.g.color     // Catch:{ NoSuchFieldError -> 0x02c4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02c4 }
                r24 = 59
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02c4 }
            L_0x02c4:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02d0 }
                a8.k$g r23 = a8.k.g.font     // Catch:{ NoSuchFieldError -> 0x02d0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02d0 }
                r24 = 60
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02d0 }
            L_0x02d0:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02dc }
                a8.k$g r23 = a8.k.g.font_family     // Catch:{ NoSuchFieldError -> 0x02dc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02dc }
                r24 = 61
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02dc }
            L_0x02dc:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02e8 }
                a8.k$g r23 = a8.k.g.font_size     // Catch:{ NoSuchFieldError -> 0x02e8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02e8 }
                r24 = 62
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02e8 }
            L_0x02e8:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x02f4 }
                a8.k$g r23 = a8.k.g.font_weight     // Catch:{ NoSuchFieldError -> 0x02f4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02f4 }
                r24 = 63
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02f4 }
            L_0x02f4:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0300 }
                a8.k$g r23 = a8.k.g.font_style     // Catch:{ NoSuchFieldError -> 0x0300 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0300 }
                r24 = 64
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0300 }
            L_0x0300:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x030c }
                a8.k$g r23 = a8.k.g.text_decoration     // Catch:{ NoSuchFieldError -> 0x030c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x030c }
                r24 = 65
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x030c }
            L_0x030c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0318 }
                a8.k$g r23 = a8.k.g.direction     // Catch:{ NoSuchFieldError -> 0x0318 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0318 }
                r24 = 66
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0318 }
            L_0x0318:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0324 }
                a8.k$g r23 = a8.k.g.text_anchor     // Catch:{ NoSuchFieldError -> 0x0324 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0324 }
                r24 = 67
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0324 }
            L_0x0324:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0330 }
                a8.k$g r23 = a8.k.g.overflow     // Catch:{ NoSuchFieldError -> 0x0330 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0330 }
                r24 = 68
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0330 }
            L_0x0330:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x033c }
                a8.k$g r23 = a8.k.g.marker     // Catch:{ NoSuchFieldError -> 0x033c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x033c }
                r24 = 69
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x033c }
            L_0x033c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0348 }
                a8.k$g r23 = a8.k.g.marker_start     // Catch:{ NoSuchFieldError -> 0x0348 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0348 }
                r24 = 70
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0348 }
            L_0x0348:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0354 }
                a8.k$g r23 = a8.k.g.marker_mid     // Catch:{ NoSuchFieldError -> 0x0354 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0354 }
                r24 = 71
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0354 }
            L_0x0354:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0360 }
                a8.k$g r23 = a8.k.g.marker_end     // Catch:{ NoSuchFieldError -> 0x0360 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0360 }
                r24 = 72
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0360 }
            L_0x0360:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x036c }
                a8.k$g r23 = a8.k.g.display     // Catch:{ NoSuchFieldError -> 0x036c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x036c }
                r24 = 73
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x036c }
            L_0x036c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0378 }
                a8.k$g r23 = a8.k.g.visibility     // Catch:{ NoSuchFieldError -> 0x0378 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0378 }
                r24 = 74
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0378 }
            L_0x0378:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0384 }
                a8.k$g r23 = a8.k.g.stop_color     // Catch:{ NoSuchFieldError -> 0x0384 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0384 }
                r24 = 75
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0384 }
            L_0x0384:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0390 }
                a8.k$g r23 = a8.k.g.stop_opacity     // Catch:{ NoSuchFieldError -> 0x0390 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0390 }
                r24 = 76
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0390 }
            L_0x0390:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x039c }
                a8.k$g r23 = a8.k.g.clip     // Catch:{ NoSuchFieldError -> 0x039c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x039c }
                r24 = 77
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x039c }
            L_0x039c:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03a8 }
                a8.k$g r23 = a8.k.g.clip_path     // Catch:{ NoSuchFieldError -> 0x03a8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03a8 }
                r24 = 78
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03a8 }
            L_0x03a8:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03b4 }
                a8.k$g r23 = a8.k.g.clip_rule     // Catch:{ NoSuchFieldError -> 0x03b4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03b4 }
                r24 = 79
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03b4 }
            L_0x03b4:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03c0 }
                a8.k$g r23 = a8.k.g.mask     // Catch:{ NoSuchFieldError -> 0x03c0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03c0 }
                r24 = 80
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03c0 }
            L_0x03c0:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03cc }
                a8.k$g r23 = a8.k.g.solid_color     // Catch:{ NoSuchFieldError -> 0x03cc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03cc }
                r24 = 81
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03cc }
            L_0x03cc:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03d8 }
                a8.k$g r23 = a8.k.g.solid_opacity     // Catch:{ NoSuchFieldError -> 0x03d8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03d8 }
                r24 = 82
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03d8 }
            L_0x03d8:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03e4 }
                a8.k$g r23 = a8.k.g.viewport_fill     // Catch:{ NoSuchFieldError -> 0x03e4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03e4 }
                r24 = 83
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03e4 }
            L_0x03e4:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03f0 }
                a8.k$g r23 = a8.k.g.viewport_fill_opacity     // Catch:{ NoSuchFieldError -> 0x03f0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03f0 }
                r24 = 84
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03f0 }
            L_0x03f0:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x03fc }
                a8.k$g r23 = a8.k.g.vector_effect     // Catch:{ NoSuchFieldError -> 0x03fc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03fc }
                r24 = 85
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03fc }
            L_0x03fc:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0408 }
                a8.k$g r23 = a8.k.g.image_rendering     // Catch:{ NoSuchFieldError -> 0x0408 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0408 }
                r24 = 86
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0408 }
            L_0x0408:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0414 }
                a8.k$g r23 = a8.k.g.viewBox     // Catch:{ NoSuchFieldError -> 0x0414 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0414 }
                r24 = 87
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0414 }
            L_0x0414:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x0420 }
                a8.k$g r23 = a8.k.g.type     // Catch:{ NoSuchFieldError -> 0x0420 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0420 }
                r24 = 88
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0420 }
            L_0x0420:
                int[] r22 = f41851b     // Catch:{ NoSuchFieldError -> 0x042c }
                a8.k$g r23 = a8.k.g.media     // Catch:{ NoSuchFieldError -> 0x042c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x042c }
                r24 = 89
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x042c }
            L_0x042c:
                a8.k$h[] r15 = a8.k.h.values()
                int r15 = r15.length
                int[] r15 = new int[r15]
                f41850a = r15
                a8.k$h r23 = a8.k.h.svg     // Catch:{ NoSuchFieldError -> 0x043d }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x043d }
                r15[r23] = r1     // Catch:{ NoSuchFieldError -> 0x043d }
            L_0x043d:
                int[] r1 = f41850a     // Catch:{ NoSuchFieldError -> 0x0447 }
                a8.k$h r15 = a8.k.h.g     // Catch:{ NoSuchFieldError -> 0x0447 }
                int r15 = r15.ordinal()     // Catch:{ NoSuchFieldError -> 0x0447 }
                r1[r15] = r0     // Catch:{ NoSuchFieldError -> 0x0447 }
            L_0x0447:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0451 }
                a8.k$h r1 = a8.k.h.a     // Catch:{ NoSuchFieldError -> 0x0451 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0451 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0451 }
            L_0x0451:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x045b }
                a8.k$h r1 = a8.k.h.defs     // Catch:{ NoSuchFieldError -> 0x045b }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x045b }
                r0[r1] = r3     // Catch:{ NoSuchFieldError -> 0x045b }
            L_0x045b:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0465 }
                a8.k$h r1 = a8.k.h.use     // Catch:{ NoSuchFieldError -> 0x0465 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0465 }
                r0[r1] = r4     // Catch:{ NoSuchFieldError -> 0x0465 }
            L_0x0465:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x046f }
                a8.k$h r1 = a8.k.h.path     // Catch:{ NoSuchFieldError -> 0x046f }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x046f }
                r0[r1] = r5     // Catch:{ NoSuchFieldError -> 0x046f }
            L_0x046f:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0479 }
                a8.k$h r1 = a8.k.h.rect     // Catch:{ NoSuchFieldError -> 0x0479 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0479 }
                r0[r1] = r6     // Catch:{ NoSuchFieldError -> 0x0479 }
            L_0x0479:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0483 }
                a8.k$h r1 = a8.k.h.circle     // Catch:{ NoSuchFieldError -> 0x0483 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0483 }
                r0[r1] = r7     // Catch:{ NoSuchFieldError -> 0x0483 }
            L_0x0483:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x048d }
                a8.k$h r1 = a8.k.h.ellipse     // Catch:{ NoSuchFieldError -> 0x048d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x048d }
                r0[r1] = r8     // Catch:{ NoSuchFieldError -> 0x048d }
            L_0x048d:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0497 }
                a8.k$h r1 = a8.k.h.line     // Catch:{ NoSuchFieldError -> 0x0497 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0497 }
                r0[r1] = r9     // Catch:{ NoSuchFieldError -> 0x0497 }
            L_0x0497:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04a1 }
                a8.k$h r1 = a8.k.h.polyline     // Catch:{ NoSuchFieldError -> 0x04a1 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04a1 }
                r0[r1] = r10     // Catch:{ NoSuchFieldError -> 0x04a1 }
            L_0x04a1:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04ab }
                a8.k$h r1 = a8.k.h.polygon     // Catch:{ NoSuchFieldError -> 0x04ab }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04ab }
                r0[r1] = r11     // Catch:{ NoSuchFieldError -> 0x04ab }
            L_0x04ab:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04b5 }
                a8.k$h r1 = a8.k.h.text     // Catch:{ NoSuchFieldError -> 0x04b5 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04b5 }
                r0[r1] = r12     // Catch:{ NoSuchFieldError -> 0x04b5 }
            L_0x04b5:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04bf }
                a8.k$h r1 = a8.k.h.tspan     // Catch:{ NoSuchFieldError -> 0x04bf }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04bf }
                r0[r1] = r13     // Catch:{ NoSuchFieldError -> 0x04bf }
            L_0x04bf:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04c9 }
                a8.k$h r1 = a8.k.h.tref     // Catch:{ NoSuchFieldError -> 0x04c9 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04c9 }
                r0[r1] = r14     // Catch:{ NoSuchFieldError -> 0x04c9 }
            L_0x04c9:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04d5 }
                a8.k$h r1 = a8.k.h.SWITCH     // Catch:{ NoSuchFieldError -> 0x04d5 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04d5 }
                r2 = 16
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04d5 }
            L_0x04d5:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04df }
                a8.k$h r1 = a8.k.h.symbol     // Catch:{ NoSuchFieldError -> 0x04df }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04df }
                r0[r1] = r16     // Catch:{ NoSuchFieldError -> 0x04df }
            L_0x04df:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04e9 }
                a8.k$h r1 = a8.k.h.marker     // Catch:{ NoSuchFieldError -> 0x04e9 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04e9 }
                r0[r1] = r17     // Catch:{ NoSuchFieldError -> 0x04e9 }
            L_0x04e9:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04f3 }
                a8.k$h r1 = a8.k.h.linearGradient     // Catch:{ NoSuchFieldError -> 0x04f3 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04f3 }
                r0[r1] = r18     // Catch:{ NoSuchFieldError -> 0x04f3 }
            L_0x04f3:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x04fd }
                a8.k$h r1 = a8.k.h.radialGradient     // Catch:{ NoSuchFieldError -> 0x04fd }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04fd }
                r0[r1] = r19     // Catch:{ NoSuchFieldError -> 0x04fd }
            L_0x04fd:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0507 }
                a8.k$h r1 = a8.k.h.stop     // Catch:{ NoSuchFieldError -> 0x0507 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0507 }
                r0[r1] = r20     // Catch:{ NoSuchFieldError -> 0x0507 }
            L_0x0507:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0511 }
                a8.k$h r1 = a8.k.h.title     // Catch:{ NoSuchFieldError -> 0x0511 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0511 }
                r0[r1] = r21     // Catch:{ NoSuchFieldError -> 0x0511 }
            L_0x0511:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x051d }
                a8.k$h r1 = a8.k.h.desc     // Catch:{ NoSuchFieldError -> 0x051d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x051d }
                r2 = 23
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x051d }
            L_0x051d:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0529 }
                a8.k$h r1 = a8.k.h.clipPath     // Catch:{ NoSuchFieldError -> 0x0529 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0529 }
                r2 = 24
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0529 }
            L_0x0529:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0535 }
                a8.k$h r1 = a8.k.h.textPath     // Catch:{ NoSuchFieldError -> 0x0535 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0535 }
                r2 = 25
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0535 }
            L_0x0535:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0541 }
                a8.k$h r1 = a8.k.h.pattern     // Catch:{ NoSuchFieldError -> 0x0541 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0541 }
                r2 = 26
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0541 }
            L_0x0541:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x054d }
                a8.k$h r1 = a8.k.h.image     // Catch:{ NoSuchFieldError -> 0x054d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x054d }
                r2 = 27
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x054d }
            L_0x054d:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0559 }
                a8.k$h r1 = a8.k.h.view     // Catch:{ NoSuchFieldError -> 0x0559 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0559 }
                r2 = 28
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0559 }
            L_0x0559:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0565 }
                a8.k$h r1 = a8.k.h.mask     // Catch:{ NoSuchFieldError -> 0x0565 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0565 }
                r2 = 29
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0565 }
            L_0x0565:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x0571 }
                a8.k$h r1 = a8.k.h.style     // Catch:{ NoSuchFieldError -> 0x0571 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0571 }
                r2 = 30
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0571 }
            L_0x0571:
                int[] r0 = f41850a     // Catch:{ NoSuchFieldError -> 0x057d }
                a8.k$h r1 = a8.k.h.solidColor     // Catch:{ NoSuchFieldError -> 0x057d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x057d }
                r2 = 31
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x057d }
            L_0x057d:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: a8.k.a.<clinit>():void");
        }
    }

    private static class b {

        /* renamed from: a  reason: collision with root package name */
        private static final Map<String, e.a> f41852a;

        static {
            HashMap hashMap = new HashMap(10);
            f41852a = hashMap;
            hashMap.put("none", e.a.none);
            hashMap.put("xMinYMin", e.a.xMinYMin);
            hashMap.put("xMidYMin", e.a.xMidYMin);
            hashMap.put("xMaxYMin", e.a.xMaxYMin);
            hashMap.put("xMinYMid", e.a.xMinYMid);
            hashMap.put("xMidYMid", e.a.xMidYMid);
            hashMap.put("xMaxYMid", e.a.xMaxYMid);
            hashMap.put("xMinYMax", e.a.xMinYMax);
            hashMap.put("xMidYMax", e.a.xMidYMax);
            hashMap.put("xMaxYMax", e.a.xMaxYMax);
        }

        static e.a a(String str) {
            return f41852a.get(str);
        }
    }

    private static class c {

        /* renamed from: a  reason: collision with root package name */
        private static final Map<String, Integer> f41853a;

        static {
            HashMap hashMap = new HashMap(47);
            f41853a = hashMap;
            hashMap.put("aliceblue", -984833);
            hashMap.put("antiquewhite", -332841);
            hashMap.put("aqua", -16711681);
            hashMap.put("aquamarine", -8388652);
            hashMap.put("azure", -983041);
            hashMap.put("beige", -657956);
            hashMap.put("bisque", -6972);
            hashMap.put("black", -16777216);
            hashMap.put("blanchedalmond", -5171);
            hashMap.put("blue", -16776961);
            hashMap.put("blueviolet", -7722014);
            hashMap.put("brown", -5952982);
            hashMap.put("burlywood", -2180985);
            hashMap.put("cadetblue", -10510688);
            hashMap.put("chartreuse", -8388864);
            hashMap.put("chocolate", -2987746);
            hashMap.put("coral", -32944);
            hashMap.put("cornflowerblue", -10185235);
            hashMap.put("cornsilk", -1828);
            hashMap.put("crimson", -2354116);
            hashMap.put("cyan", -16711681);
            hashMap.put("darkblue", -16777077);
            hashMap.put("darkcyan", -16741493);
            hashMap.put("darkgoldenrod", -4684277);
            hashMap.put("darkgray", -5658199);
            hashMap.put("darkgreen", -16751616);
            hashMap.put("darkgrey", -5658199);
            hashMap.put("darkkhaki", -4343957);
            hashMap.put("darkmagenta", -7667573);
            hashMap.put("darkolivegreen", -11179217);
            hashMap.put("darkorange", -29696);
            hashMap.put("darkorchid", -6737204);
            hashMap.put("darkred", -7667712);
            hashMap.put("darksalmon", -1468806);
            hashMap.put("darkseagreen", -7357297);
            hashMap.put("darkslateblue", -12042869);
            hashMap.put("darkslategray", -13676721);
            hashMap.put("darkslategrey", -13676721);
            hashMap.put("darkturquoise", -16724271);
            hashMap.put("darkviolet", -7077677);
            hashMap.put("deeppink", -60269);
            hashMap.put("deepskyblue", -16728065);
            hashMap.put("dimgray", -9868951);
            hashMap.put("dimgrey", -9868951);
            hashMap.put("dodgerblue", -14774017);
            hashMap.put("firebrick", -5103070);
            hashMap.put("floralwhite", -1296);
            hashMap.put("forestgreen", -14513374);
            hashMap.put("fuchsia", -65281);
            hashMap.put("gainsboro", -2302756);
            hashMap.put("ghostwhite", -460545);
            hashMap.put("gold", -10496);
            hashMap.put("goldenrod", -2448096);
            hashMap.put("gray", -8355712);
            hashMap.put("green", -16744448);
            hashMap.put("greenyellow", -5374161);
            hashMap.put("grey", -8355712);
            hashMap.put("honeydew", -983056);
            hashMap.put("hotpink", -38476);
            hashMap.put("indianred", -3318692);
            hashMap.put("indigo", -11861886);
            hashMap.put("ivory", -16);
            hashMap.put("khaki", -989556);
            hashMap.put("lavender", -1644806);
            hashMap.put("lavenderblush", -3851);
            hashMap.put("lawngreen", -8586240);
            hashMap.put("lemonchiffon", -1331);
            hashMap.put("lightblue", -5383962);
            hashMap.put("lightcoral", -1015680);
            hashMap.put("lightcyan", -2031617);
            hashMap.put("lightgoldenrodyellow", -329006);
            hashMap.put("lightgray", -2894893);
            hashMap.put("lightgreen", -7278960);
            hashMap.put("lightgrey", -2894893);
            hashMap.put("lightpink", -18751);
            hashMap.put("lightsalmon", -24454);
            hashMap.put("lightseagreen", -14634326);
            hashMap.put("lightskyblue", -7876870);
            hashMap.put("lightslategray", -8943463);
            hashMap.put("lightslategrey", -8943463);
            hashMap.put("lightsteelblue", -5192482);
            hashMap.put("lightyellow", -32);
            hashMap.put("lime", -16711936);
            hashMap.put("limegreen", -13447886);
            hashMap.put("linen", -331546);
            hashMap.put("magenta", -65281);
            hashMap.put("maroon", -8388608);
            hashMap.put("mediumaquamarine", -10039894);
            hashMap.put("mediumblue", -16777011);
            hashMap.put("mediumorchid", -4565549);
            hashMap.put("mediumpurple", -7114533);
            hashMap.put("mediumseagreen", -12799119);
            hashMap.put("mediumslateblue", -8689426);
            hashMap.put("mediumspringgreen", -16713062);
            hashMap.put("mediumturquoise", -12004916);
            hashMap.put("mediumvioletred", -3730043);
            hashMap.put("midnightblue", -15132304);
            hashMap.put("mintcream", -655366);
            hashMap.put("mistyrose", -6943);
            hashMap.put("moccasin", -6987);
            hashMap.put("navajowhite", -8531);
            hashMap.put("navy", -16777088);
            hashMap.put("oldlace", -133658);
            hashMap.put("olive", -8355840);
            hashMap.put("olivedrab", -9728477);
            hashMap.put("orange", -23296);
            hashMap.put("orangered", -47872);
            hashMap.put("orchid", -2461482);
            hashMap.put("palegoldenrod", -1120086);
            hashMap.put("palegreen", -6751336);
            hashMap.put("paleturquoise", -5247250);
            hashMap.put("palevioletred", -2396013);
            hashMap.put("papayawhip", -4139);
            hashMap.put("peachpuff", -9543);
            hashMap.put("peru", -3308225);
            hashMap.put("pink", -16181);
            hashMap.put("plum", -2252579);
            hashMap.put("powderblue", -5185306);
            hashMap.put("purple", -8388480);
            hashMap.put("rebeccapurple", -10079335);
            hashMap.put("red", -65536);
            hashMap.put("rosybrown", -4419697);
            hashMap.put("royalblue", -12490271);
            hashMap.put("saddlebrown", -7650029);
            hashMap.put("salmon", -360334);
            hashMap.put("sandybrown", -744352);
            hashMap.put("seagreen", -13726889);
            hashMap.put("seashell", -2578);
            hashMap.put("sienna", -6270419);
            hashMap.put("silver", -4144960);
            hashMap.put("skyblue", -7876885);
            hashMap.put("slateblue", -9807155);
            hashMap.put("slategray", -9404272);
            hashMap.put("slategrey", -9404272);
            hashMap.put("snow", -1286);
            hashMap.put("springgreen", -16711809);
            hashMap.put("steelblue", -12156236);
            hashMap.put("tan", -2968436);
            hashMap.put("teal", -16744320);
            hashMap.put("thistle", -2572328);
            hashMap.put("tomato", -40121);
            hashMap.put("turquoise", -12525360);
            hashMap.put("violet", -1146130);
            hashMap.put("wheat", -663885);
            hashMap.put("white", -1);
            hashMap.put("whitesmoke", -657931);
            hashMap.put("yellow", -256);
            hashMap.put("yellowgreen", -6632142);
            hashMap.put("transparent", 0);
        }

        static Integer a(String str) {
            return f41853a.get(str);
        }
    }

    private static class d {

        /* renamed from: a  reason: collision with root package name */
        private static final Map<String, g.C6769p> f41854a;

        static {
            HashMap hashMap = new HashMap(9);
            f41854a = hashMap;
            g.d0 d0Var = g.d0.pt;
            hashMap.put("xx-small", new g.C6769p(0.694f, d0Var));
            hashMap.put("x-small", new g.C6769p(0.833f, d0Var));
            hashMap.put(Constants.SMALL, new g.C6769p(10.0f, d0Var));
            hashMap.put(Constants.MEDIUM, new g.C6769p(12.0f, d0Var));
            hashMap.put(Constants.LARGE, new g.C6769p(14.4f, d0Var));
            hashMap.put("x-large", new g.C6769p(17.3f, d0Var));
            hashMap.put("xx-large", new g.C6769p(20.7f, d0Var));
            g.d0 d0Var2 = g.d0.percent;
            hashMap.put("smaller", new g.C6769p(83.33f, d0Var2));
            hashMap.put("larger", new g.C6769p(120.0f, d0Var2));
        }

        static g.C6769p a(String str) {
            return f41854a.get(str);
        }
    }

    private static class e {

        /* renamed from: a  reason: collision with root package name */
        private static final Map<String, Integer> f41855a;

        static {
            HashMap hashMap = new HashMap(13);
            f41855a = hashMap;
            Integer valueOf = Integer.valueOf(Constants.MINIMAL_ERROR_STATUS_CODE);
            hashMap.put(Constants.NORMAL, valueOf);
            hashMap.put("bold", 700);
            hashMap.put("bolder", 1);
            hashMap.put("lighter", -1);
            hashMap.put("100", 100);
            hashMap.put("200", 200);
            hashMap.put("300", 300);
            hashMap.put("400", valueOf);
            hashMap.put("500", 500);
            hashMap.put("600", 600);
            hashMap.put("700", 700);
            hashMap.put("800", 800);
            hashMap.put("900", 900);
        }

        static Integer a(String str) {
            return f41855a.get(str);
        }
    }

    private class f extends DefaultHandler2 {
        private f() {
        }

        public void characters(char[] cArr, int i10, int i11) {
            k.this.c1(new String(cArr, i10, i11));
        }

        public void endDocument() {
            k.this.o();
        }

        public void endElement(String str, String str2, String str3) {
            k.this.p(str, str2, str3);
        }

        public void processingInstruction(String str, String str2) {
            k.this.r(str, k.this.x0(new i(str2)));
        }

        public void startDocument() {
            k.this.W0();
        }

        public void startElement(String str, String str2, String str3, Attributes attributes) {
            k.this.X0(str, str2, str3, attributes);
        }

        /* synthetic */ f(k kVar, a aVar) {
            this();
        }
    }

    private enum g {
        CLASS,
        clip,
        clip_path,
        clipPathUnits,
        clip_rule,
        color,
        cx,
        cy,
        direction,
        dx,
        dy,
        fx,
        fy,
        d,
        display,
        fill,
        fill_rule,
        fill_opacity,
        font,
        font_family,
        font_size,
        font_weight,
        font_style,
        gradientTransform,
        gradientUnits,
        height,
        href,
        image_rendering,
        marker,
        marker_start,
        marker_mid,
        marker_end,
        markerHeight,
        markerUnits,
        markerWidth,
        mask,
        maskContentUnits,
        maskUnits,
        media,
        offset,
        opacity,
        orient,
        overflow,
        pathLength,
        patternContentUnits,
        patternTransform,
        patternUnits,
        points,
        preserveAspectRatio,
        r,
        refX,
        refY,
        requiredFeatures,
        requiredExtensions,
        requiredFormats,
        requiredFonts,
        rx,
        ry,
        solid_color,
        solid_opacity,
        spreadMethod,
        startOffset,
        stop_color,
        stop_opacity,
        stroke,
        stroke_dasharray,
        stroke_dashoffset,
        stroke_linecap,
        stroke_linejoin,
        stroke_miterlimit,
        stroke_opacity,
        stroke_width,
        style,
        systemLanguage,
        text_anchor,
        text_decoration,
        transform,
        type,
        vector_effect,
        version,
        viewBox,
        width,
        x,
        y,
        x1,
        y1,
        x2,
        y2,
        viewport_fill,
        viewport_fill_opacity,
        visibility,
        UNSUPPORTED;
        
        private static final Map<String, g> cache = null;

        static {
            cache = new HashMap();
            for (g gVar : values()) {
                if (gVar == CLASS) {
                    cache.put("class", gVar);
                } else if (gVar != UNSUPPORTED) {
                    cache.put(gVar.name().replace('_', '-'), gVar);
                }
            }
        }

        public static g a(String str) {
            g gVar = cache.get(str);
            return gVar != null ? gVar : UNSUPPORTED;
        }
    }

    private enum h {
        svg,
        a,
        circle,
        clipPath,
        defs,
        desc,
        ellipse,
        g,
        image,
        line,
        linearGradient,
        marker,
        mask,
        path,
        pattern,
        polygon,
        polyline,
        radialGradient,
        rect,
        solidColor,
        stop,
        style,
        SWITCH,
        symbol,
        text,
        textPath,
        title,
        tref,
        tspan,
        use,
        view,
        UNSUPPORTED;
        
        private static final Map<String, h> cache = null;

        static {
            cache = new HashMap();
            for (h hVar : values()) {
                if (hVar == SWITCH) {
                    cache.put("switch", hVar);
                } else if (hVar != UNSUPPORTED) {
                    cache.put(hVar.name(), hVar);
                }
            }
        }

        public static h a(String str) {
            h hVar = cache.get(str);
            return hVar != null ? hVar : UNSUPPORTED;
        }
    }

    static class i {

        /* renamed from: a  reason: collision with root package name */
        String f41875a;

        /* renamed from: b  reason: collision with root package name */
        int f41876b = 0;

        /* renamed from: c  reason: collision with root package name */
        int f41877c = 0;

        /* renamed from: d  reason: collision with root package name */
        private C6754d f41878d = new C6754d();

        i(String str) {
            String trim = str.trim();
            this.f41875a = trim;
            this.f41877c = trim.length();
        }

        /* access modifiers changed from: package-private */
        public void A() {
            while (true) {
                int i10 = this.f41876b;
                if (i10 < this.f41877c && k(this.f41875a.charAt(i10))) {
                    this.f41876b++;
                } else {
                    return;
                }
            }
        }

        /* access modifiers changed from: package-private */
        public int a() {
            int i10 = this.f41876b;
            int i11 = this.f41877c;
            if (i10 == i11) {
                return -1;
            }
            int i12 = i10 + 1;
            this.f41876b = i12;
            if (i12 < i11) {
                return this.f41875a.charAt(i12);
            }
            return -1;
        }

        /* access modifiers changed from: package-private */
        public String b() {
            int i10 = this.f41876b;
            while (!h() && !k(this.f41875a.charAt(this.f41876b))) {
                this.f41876b++;
            }
            String substring = this.f41875a.substring(i10, this.f41876b);
            this.f41876b = i10;
            return substring;
        }

        /* access modifiers changed from: package-private */
        public Boolean c(Object obj) {
            if (obj == null) {
                return null;
            }
            z();
            return m();
        }

        /* access modifiers changed from: package-private */
        public float d(float f10) {
            if (Float.isNaN(f10)) {
                return Float.NaN;
            }
            z();
            return n();
        }

        /* access modifiers changed from: package-private */
        public float e(Boolean bool) {
            if (bool == null) {
                return Float.NaN;
            }
            z();
            return n();
        }

        /* access modifiers changed from: package-private */
        public boolean f(char c10) {
            int i10 = this.f41876b;
            boolean z10 = i10 < this.f41877c && this.f41875a.charAt(i10) == c10;
            if (z10) {
                this.f41876b++;
            }
            return z10;
        }

        /* access modifiers changed from: package-private */
        public boolean g(String str) {
            int length = str.length();
            int i10 = this.f41876b;
            boolean z10 = i10 <= this.f41877c - length && this.f41875a.substring(i10, i10 + length).equals(str);
            if (z10) {
                this.f41876b += length;
            }
            return z10;
        }

        /* access modifiers changed from: package-private */
        public boolean h() {
            return this.f41876b == this.f41877c;
        }

        /* access modifiers changed from: package-private */
        public boolean i() {
            int i10 = this.f41876b;
            if (i10 == this.f41877c) {
                return false;
            }
            char charAt = this.f41875a.charAt(i10);
            return (charAt >= 'a' && charAt <= 'z') || (charAt >= 'A' && charAt <= 'Z');
        }

        /* access modifiers changed from: package-private */
        public boolean j(int i10) {
            return i10 == 10 || i10 == 13;
        }

        /* access modifiers changed from: package-private */
        public boolean k(int i10) {
            return i10 == 32 || i10 == 10 || i10 == 13 || i10 == 9;
        }

        /* access modifiers changed from: package-private */
        public Integer l() {
            int i10 = this.f41876b;
            if (i10 == this.f41877c) {
                return null;
            }
            String str = this.f41875a;
            this.f41876b = i10 + 1;
            return Integer.valueOf(str.charAt(i10));
        }

        /* access modifiers changed from: package-private */
        public Boolean m() {
            int i10 = this.f41876b;
            if (i10 == this.f41877c) {
                return null;
            }
            char charAt = this.f41875a.charAt(i10);
            if (charAt != '0' && charAt != '1') {
                return null;
            }
            boolean z10 = true;
            this.f41876b++;
            if (charAt != '1') {
                z10 = false;
            }
            return Boolean.valueOf(z10);
        }

        /* access modifiers changed from: package-private */
        public float n() {
            float b10 = this.f41878d.b(this.f41875a, this.f41876b, this.f41877c);
            if (!Float.isNaN(b10)) {
                this.f41876b = this.f41878d.a();
            }
            return b10;
        }

        /* access modifiers changed from: package-private */
        public String o() {
            if (h()) {
                return null;
            }
            int i10 = this.f41876b;
            int charAt = this.f41875a.charAt(i10);
            while (true) {
                if ((charAt < 97 || charAt > 122) && (charAt < 65 || charAt > 90)) {
                    int i11 = this.f41876b;
                } else {
                    charAt = a();
                }
            }
            int i112 = this.f41876b;
            while (k(charAt)) {
                charAt = a();
            }
            if (charAt == 40) {
                this.f41876b++;
                return this.f41875a.substring(i10, i112);
            }
            this.f41876b = i10;
            return null;
        }

        /* access modifiers changed from: package-private */
        public g.C6769p p() {
            float n10 = n();
            if (Float.isNaN(n10)) {
                return null;
            }
            g.d0 v10 = v();
            return v10 == null ? new g.C6769p(n10, g.d0.px) : new g.C6769p(n10, v10);
        }

        /* access modifiers changed from: package-private */
        public String q() {
            if (h()) {
                return null;
            }
            int i10 = this.f41876b;
            char charAt = this.f41875a.charAt(i10);
            if (charAt != '\'' && charAt != '\"') {
                return null;
            }
            int a10 = a();
            while (a10 != -1 && a10 != charAt) {
                a10 = a();
            }
            if (a10 == -1) {
                this.f41876b = i10;
                return null;
            }
            int i11 = this.f41876b;
            this.f41876b = i11 + 1;
            return this.f41875a.substring(i10 + 1, i11);
        }

        /* access modifiers changed from: package-private */
        public String r() {
            return t(' ', false);
        }

        /* access modifiers changed from: package-private */
        public String s(char c10) {
            return t(c10, false);
        }

        /* access modifiers changed from: package-private */
        public String t(char c10, boolean z10) {
            if (h()) {
                return null;
            }
            char charAt = this.f41875a.charAt(this.f41876b);
            if ((!z10 && k(charAt)) || charAt == c10) {
                return null;
            }
            int i10 = this.f41876b;
            int a10 = a();
            while (a10 != -1 && a10 != c10 && (z10 || !k(a10))) {
                a10 = a();
            }
            return this.f41875a.substring(i10, this.f41876b);
        }

        /* access modifiers changed from: package-private */
        public String u(char c10) {
            return t(c10, true);
        }

        /* access modifiers changed from: package-private */
        public g.d0 v() {
            if (h()) {
                return null;
            }
            if (this.f41875a.charAt(this.f41876b) == '%') {
                this.f41876b++;
                return g.d0.percent;
            }
            int i10 = this.f41876b;
            if (i10 > this.f41877c - 2) {
                return null;
            }
            try {
                g.d0 valueOf = g.d0.valueOf(this.f41875a.substring(i10, i10 + 2).toLowerCase(Locale.US));
                this.f41876b += 2;
                return valueOf;
            } catch (IllegalArgumentException unused) {
                return null;
            }
        }

        /* access modifiers changed from: package-private */
        public String w() {
            if (h()) {
                return null;
            }
            int i10 = this.f41876b;
            char charAt = this.f41875a.charAt(i10);
            if ((charAt < 'A' || charAt > 'Z') && (charAt < 'a' || charAt > 'z')) {
                this.f41876b = i10;
                return null;
            }
            int a10 = a();
            while (true) {
                if ((a10 >= 65 && a10 <= 90) || (a10 >= 97 && a10 <= 122)) {
                    a10 = a();
                }
            }
            return this.f41875a.substring(i10, this.f41876b);
        }

        /* access modifiers changed from: package-private */
        public float x() {
            z();
            float b10 = this.f41878d.b(this.f41875a, this.f41876b, this.f41877c);
            if (!Float.isNaN(b10)) {
                this.f41876b = this.f41878d.a();
            }
            return b10;
        }

        /* access modifiers changed from: package-private */
        public String y() {
            if (h()) {
                return null;
            }
            int i10 = this.f41876b;
            this.f41876b = this.f41877c;
            return this.f41875a.substring(i10);
        }

        /* access modifiers changed from: package-private */
        public boolean z() {
            A();
            int i10 = this.f41876b;
            if (i10 == this.f41877c || this.f41875a.charAt(i10) != ',') {
                return false;
            }
            this.f41876b++;
            A();
            return true;
        }
    }

    private class j implements Attributes {

        /* renamed from: a  reason: collision with root package name */
        private XmlPullParser f41879a;

        public j(XmlPullParser xmlPullParser) {
            this.f41879a = xmlPullParser;
        }

        public int getIndex(String str, String str2) {
            return -1;
        }

        public int getLength() {
            return this.f41879a.getAttributeCount();
        }

        public String getLocalName(int i10) {
            return this.f41879a.getAttributeName(i10);
        }

        public String getQName(int i10) {
            String attributeName = this.f41879a.getAttributeName(i10);
            if (this.f41879a.getAttributePrefix(i10) == null) {
                return attributeName;
            }
            return this.f41879a.getAttributePrefix(i10) + ':' + attributeName;
        }

        public String getType(int i10) {
            return null;
        }

        public String getURI(int i10) {
            return this.f41879a.getAttributeNamespace(i10);
        }

        public String getValue(int i10) {
            return this.f41879a.getAttributeValue(i10);
        }

        public int getIndex(String str) {
            return -1;
        }

        public String getType(String str, String str2) {
            return null;
        }

        public String getValue(String str, String str2) {
            return null;
        }

        public String getType(String str) {
            return null;
        }

        public String getValue(String str) {
            return null;
        }
    }

    k() {
    }

    private void A(g.C6758d dVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            switch (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()]) {
                case 12:
                    dVar.f41712o = o0(trim);
                    break;
                case 13:
                    dVar.f41713p = o0(trim);
                    break;
                case 14:
                    g.C6769p o02 = o0(trim);
                    dVar.f41714q = o02;
                    if (!o02.j()) {
                        break;
                    } else {
                        throw new j("Invalid <circle> element. r cannot be negative");
                    }
            }
        }
    }

    private static Set<String> A0(String str) {
        i iVar = new i(str);
        HashSet hashSet = new HashSet();
        while (!iVar.h()) {
            hashSet.add(iVar.r());
            iVar.A();
        }
        return hashSet;
    }

    private void B(g.C6759e eVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            if (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()] == 38) {
                if ("objectBoundingBox".equals(trim)) {
                    eVar.f41723p = Boolean.FALSE;
                } else if ("userSpaceOnUse".equals(trim)) {
                    eVar.f41723p = Boolean.TRUE;
                } else {
                    throw new j("Invalid value for attribute clipPathUnits");
                }
            }
        }
    }

    private static g.C6769p[] B0(String str) {
        g.C6769p p10;
        i iVar = new i(str);
        iVar.A();
        if (iVar.h() || (p10 = iVar.p()) == null || p10.j()) {
            return null;
        }
        float a10 = p10.a();
        ArrayList arrayList = new ArrayList();
        arrayList.add(p10);
        while (!iVar.h()) {
            iVar.z();
            g.C6769p p11 = iVar.p();
            if (p11 == null || p11.j()) {
                return null;
            }
            arrayList.add(p11);
            a10 += p11.a();
        }
        if (a10 == 0.0f) {
            return null;
        }
        return (g.C6769p[]) arrayList.toArray(new g.C6769p[arrayList.size()]);
    }

    private void C(g.G g10, Attributes attributes) {
        HashSet hashSet;
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            switch (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()]) {
                case 21:
                    g10.g(z0(trim));
                    break;
                case 22:
                    g10.k(trim);
                    break;
                case M.RESPONSE_BODY_ATTRIBUTES_FIELD_NUMBER /*23*/:
                    g10.i(F0(trim));
                    break;
                case BuildConfig.MIN_SDK_VERSION /*24*/:
                    g10.j(A0(trim));
                    break;
                case 25:
                    List<String> i02 = i0(trim);
                    if (i02 == null) {
                        hashSet = new HashSet(0);
                    }
                    g10.d(hashSet);
                    break;
            }
        }
    }

    private static g.E.c C0(String str) {
        if ("butt".equals(str)) {
            return g.E.c.Butt;
        }
        if ("round".equals(str)) {
            return g.E.c.Round;
        }
        if ("square".equals(str)) {
            return g.E.c.Square;
        }
        return null;
    }

    private void D(g.L l10, Attributes attributes) {
        int i10 = 0;
        while (i10 < attributes.getLength()) {
            String qName = attributes.getQName(i10);
            if (qName.equals("id") || qName.equals("xml:id")) {
                l10.f41672c = attributes.getValue(i10).trim();
                return;
            } else if (qName.equals("xml:space")) {
                String trim = attributes.getValue(i10).trim();
                if ("default".equals(trim)) {
                    l10.f41673d = Boolean.FALSE;
                    return;
                } else if ("preserve".equals(trim)) {
                    l10.f41673d = Boolean.TRUE;
                    return;
                } else {
                    throw new j("Invalid value for \"xml:space\" attribute: " + trim);
                }
            } else {
                i10++;
            }
        }
    }

    private static g.E.d D0(String str) {
        if ("miter".equals(str)) {
            return g.E.d.Miter;
        }
        if ("round".equals(str)) {
            return g.E.d.Round;
        }
        if ("bevel".equals(str)) {
            return g.E.d.Bevel;
        }
        return null;
    }

    private void E(g.C6762i iVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            switch (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()]) {
                case 10:
                    g.C6769p o02 = o0(trim);
                    iVar.f41735q = o02;
                    if (!o02.j()) {
                        break;
                    } else {
                        throw new j("Invalid <ellipse> element. rx cannot be negative");
                    }
                case 11:
                    g.C6769p o03 = o0(trim);
                    iVar.f41736r = o03;
                    if (!o03.j()) {
                        break;
                    } else {
                        throw new j("Invalid <ellipse> element. ry cannot be negative");
                    }
                case 12:
                    iVar.f41733o = o0(trim);
                    break;
                case 13:
                    iVar.f41734p = o0(trim);
                    break;
            }
        }
    }

    private static void E0(g.L l10, String str) {
        i iVar = new i(str.replaceAll("/\\*.*?\\*/", ""));
        while (true) {
            String s10 = iVar.s(':');
            iVar.A();
            if (iVar.f(':')) {
                iVar.A();
                String u10 = iVar.u(';');
                if (u10 != null) {
                    iVar.A();
                    if (iVar.h() || iVar.f(';')) {
                        if (l10.f41675f == null) {
                            l10.f41675f = new g.E();
                        }
                        S0(l10.f41675f, s10, u10);
                        iVar.A();
                    }
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:34:0x008c, code lost:
        continue;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void F(a8.g.C6763j r5, org.xml.sax.Attributes r6) {
        /*
            r4 = this;
            r0 = 0
        L_0x0001:
            int r1 = r6.getLength()
            if (r0 >= r1) goto L_0x0090
            java.lang.String r1 = r6.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = a8.k.a.f41851b
            java.lang.String r3 = r6.getLocalName(r0)
            a8.k$g r3 = a8.k.g.a(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 6
            if (r2 == r3) goto L_0x0072
            switch(r2) {
                case 32: goto L_0x0050;
                case 33: goto L_0x0049;
                case 34: goto L_0x0026;
                default: goto L_0x0025;
            }
        L_0x0025:
            goto L_0x008c
        L_0x0026:
            a8.g$k r2 = a8.g.C6764k.valueOf(r1)     // Catch:{ IllegalArgumentException -> 0x002d }
            r5.f41740k = r2     // Catch:{ IllegalArgumentException -> 0x002d }
            goto L_0x008c
        L_0x002d:
            a8.j r5 = new a8.j
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r0 = "Invalid spreadMethod attribute. \""
            r6.append(r0)
            r6.append(r1)
            java.lang.String r0 = "\" is not a valid value."
            r6.append(r0)
            java.lang.String r6 = r6.toString()
            r5.<init>(r6)
            throw r5
        L_0x0049:
            android.graphics.Matrix r1 = r4.J0(r1)
            r5.f41739j = r1
            goto L_0x008c
        L_0x0050:
            java.lang.String r2 = "objectBoundingBox"
            boolean r2 = r2.equals(r1)
            if (r2 == 0) goto L_0x005d
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r5.f41738i = r1
            goto L_0x008c
        L_0x005d:
            java.lang.String r2 = "userSpaceOnUse"
            boolean r1 = r2.equals(r1)
            if (r1 == 0) goto L_0x006a
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r5.f41738i = r1
            goto L_0x008c
        L_0x006a:
            a8.j r5 = new a8.j
            java.lang.String r6 = "Invalid value for attribute gradientUnits"
            r5.<init>(r6)
            throw r5
        L_0x0072:
            java.lang.String r2 = ""
            java.lang.String r3 = r6.getURI(r0)
            boolean r2 = r2.equals(r3)
            if (r2 != 0) goto L_0x008a
            java.lang.String r2 = "http://www.w3.org/1999/xlink"
            java.lang.String r3 = r6.getURI(r0)
            boolean r2 = r2.equals(r3)
            if (r2 == 0) goto L_0x008c
        L_0x008a:
            r5.f41741l = r1
        L_0x008c:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x0090:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: a8.k.F(a8.g$j, org.xml.sax.Attributes):void");
    }

    private static Set<String> F0(String str) {
        i iVar = new i(str);
        HashSet hashSet = new HashSet();
        while (!iVar.h()) {
            String r10 = iVar.r();
            int indexOf = r10.indexOf(45);
            if (indexOf != -1) {
                r10 = r10.substring(0, indexOf);
            }
            hashSet.add(new Locale(r10, "", "").getLanguage());
            iVar.A();
        }
        return hashSet;
    }

    private void G(g.C6768o oVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 1) {
                oVar.f41745q = o0(trim);
            } else if (i11 == 2) {
                oVar.f41746r = o0(trim);
            } else if (i11 == 3) {
                g.C6769p o02 = o0(trim);
                oVar.f41747s = o02;
                if (o02.j()) {
                    throw new j("Invalid <use> element. width cannot be negative");
                }
            } else if (i11 == 4) {
                g.C6769p o03 = o0(trim);
                oVar.f41748t = o03;
                if (o03.j()) {
                    throw new j("Invalid <use> element. height cannot be negative");
                }
            } else if (i11 != 6) {
                if (i11 == 7) {
                    w0(oVar, trim);
                }
            } else if ("".equals(attributes.getURI(i10)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i10))) {
                oVar.f41744p = trim;
            }
        }
    }

    private static g.E.f G0(String str) {
        str.hashCode();
        char c10 = 65535;
        switch (str.hashCode()) {
            case -1074341483:
                if (str.equals("middle")) {
                    c10 = 0;
                    break;
                }
                break;
            case 100571:
                if (str.equals("end")) {
                    c10 = 1;
                    break;
                }
                break;
            case 109757538:
                if (str.equals("start")) {
                    c10 = 2;
                    break;
                }
                break;
        }
        switch (c10) {
            case 0:
                return g.E.f.Middle;
            case 1:
                return g.E.f.End;
            case 2:
                return g.E.f.Start;
            default:
                return null;
        }
    }

    private void H(g.C6770q qVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            switch (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()]) {
                case 15:
                    qVar.f41752o = o0(trim);
                    break;
                case 16:
                    qVar.f41753p = o0(trim);
                    break;
                case 17:
                    qVar.f41754q = o0(trim);
                    break;
                case 18:
                    qVar.f41755r = o0(trim);
                    break;
            }
        }
    }

    private static g.E.C0735g H0(String str) {
        str.hashCode();
        char c10 = 65535;
        switch (str.hashCode()) {
            case -1171789332:
                if (str.equals("line-through")) {
                    c10 = 0;
                    break;
                }
                break;
            case -1026963764:
                if (str.equals("underline")) {
                    c10 = 1;
                    break;
                }
                break;
            case 3387192:
                if (str.equals("none")) {
                    c10 = 2;
                    break;
                }
                break;
            case 93826908:
                if (str.equals("blink")) {
                    c10 = 3;
                    break;
                }
                break;
            case 529818312:
                if (str.equals("overline")) {
                    c10 = 4;
                    break;
                }
                break;
        }
        switch (c10) {
            case 0:
                return g.E.C0735g.LineThrough;
            case 1:
                return g.E.C0735g.Underline;
            case 2:
                return g.E.C0735g.None;
            case 3:
                return g.E.C0735g.Blink;
            case 4:
                return g.E.C0735g.Overline;
            default:
                return null;
        }
    }

    private void I(g.M m10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            switch (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()]) {
                case 15:
                    m10.f41677m = o0(trim);
                    break;
                case 16:
                    m10.f41678n = o0(trim);
                    break;
                case 17:
                    m10.f41679o = o0(trim);
                    break;
                case 18:
                    m10.f41680p = o0(trim);
                    break;
            }
        }
    }

    private static g.E.h I0(String str) {
        str.hashCode();
        if (str.equals("ltr")) {
            return g.E.h.LTR;
        }
        if (!str.equals("rtl")) {
            return null;
        }
        return g.E.h.RTL;
    }

    private void J(g.C6771r rVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            switch (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()]) {
                case 26:
                    rVar.f41757r = o0(trim);
                    break;
                case 27:
                    rVar.f41758s = o0(trim);
                    break;
                case 28:
                    g.C6769p o02 = o0(trim);
                    rVar.f41759t = o02;
                    if (!o02.j()) {
                        break;
                    } else {
                        throw new j("Invalid <marker> element. markerWidth cannot be negative");
                    }
                case 29:
                    g.C6769p o03 = o0(trim);
                    rVar.f41760u = o03;
                    if (!o03.j()) {
                        break;
                    } else {
                        throw new j("Invalid <marker> element. markerHeight cannot be negative");
                    }
                case 30:
                    if ("strokeWidth".equals(trim)) {
                        rVar.f41756q = false;
                        break;
                    } else if ("userSpaceOnUse".equals(trim)) {
                        rVar.f41756q = true;
                        break;
                    } else {
                        throw new j("Invalid value for attribute markerUnits");
                    }
                case 31:
                    if (!"auto".equals(trim)) {
                        rVar.f41761v = Float.valueOf(f0(trim));
                        break;
                    } else {
                        rVar.f41761v = Float.valueOf(Float.NaN);
                        break;
                    }
            }
        }
    }

    private Matrix J0(String str) {
        String str2 = str;
        Matrix matrix = new Matrix();
        i iVar = new i(str2);
        iVar.A();
        while (!iVar.h()) {
            String o10 = iVar.o();
            if (o10 != null) {
                char c10 = 65535;
                switch (o10.hashCode()) {
                    case -1081239615:
                        if (o10.equals("matrix")) {
                            c10 = 0;
                            break;
                        }
                        break;
                    case -925180581:
                        if (o10.equals("rotate")) {
                            c10 = 1;
                            break;
                        }
                        break;
                    case 109250890:
                        if (o10.equals("scale")) {
                            c10 = 2;
                            break;
                        }
                        break;
                    case 109493390:
                        if (o10.equals("skewX")) {
                            c10 = 3;
                            break;
                        }
                        break;
                    case 109493391:
                        if (o10.equals("skewY")) {
                            c10 = 4;
                            break;
                        }
                        break;
                    case 1052832078:
                        if (o10.equals("translate")) {
                            c10 = 5;
                            break;
                        }
                        break;
                }
                switch (c10) {
                    case 0:
                        iVar.A();
                        float n10 = iVar.n();
                        iVar.z();
                        float n11 = iVar.n();
                        iVar.z();
                        float n12 = iVar.n();
                        iVar.z();
                        float n13 = iVar.n();
                        iVar.z();
                        float n14 = iVar.n();
                        iVar.z();
                        float n15 = iVar.n();
                        iVar.A();
                        if (!Float.isNaN(n15) && iVar.f(')')) {
                            Matrix matrix2 = new Matrix();
                            matrix2.setValues(new float[]{n10, n12, n14, n11, n13, n15, 0.0f, 0.0f, 1.0f});
                            matrix.preConcat(matrix2);
                            break;
                        } else {
                            throw new j("Invalid transform list: " + str2);
                        }
                        break;
                    case 1:
                        iVar.A();
                        float n16 = iVar.n();
                        float x10 = iVar.x();
                        float x11 = iVar.x();
                        iVar.A();
                        if (Float.isNaN(n16) || !iVar.f(')')) {
                            throw new j("Invalid transform list: " + str2);
                        } else if (Float.isNaN(x10)) {
                            matrix.preRotate(n16);
                            break;
                        } else if (!Float.isNaN(x11)) {
                            matrix.preRotate(n16, x10, x11);
                            break;
                        } else {
                            throw new j("Invalid transform list: " + str2);
                        }
                    case 2:
                        iVar.A();
                        float n17 = iVar.n();
                        float x12 = iVar.x();
                        iVar.A();
                        if (!Float.isNaN(n17) && iVar.f(')')) {
                            if (!Float.isNaN(x12)) {
                                matrix.preScale(n17, x12);
                                break;
                            } else {
                                matrix.preScale(n17, n17);
                                break;
                            }
                        } else {
                            throw new j("Invalid transform list: " + str2);
                        }
                        break;
                    case 3:
                        iVar.A();
                        float n18 = iVar.n();
                        iVar.A();
                        if (!Float.isNaN(n18) && iVar.f(')')) {
                            matrix.preSkew((float) Math.tan(Math.toRadians((double) n18)), 0.0f);
                            break;
                        } else {
                            throw new j("Invalid transform list: " + str2);
                        }
                        break;
                    case 4:
                        iVar.A();
                        float n19 = iVar.n();
                        iVar.A();
                        if (!Float.isNaN(n19) && iVar.f(')')) {
                            matrix.preSkew(0.0f, (float) Math.tan(Math.toRadians((double) n19)));
                            break;
                        } else {
                            throw new j("Invalid transform list: " + str2);
                        }
                    case 5:
                        iVar.A();
                        float n20 = iVar.n();
                        float x13 = iVar.x();
                        iVar.A();
                        if (!Float.isNaN(n20) && iVar.f(')')) {
                            if (!Float.isNaN(x13)) {
                                matrix.preTranslate(n20, x13);
                                break;
                            } else {
                                matrix.preTranslate(n20, 0.0f);
                                break;
                            }
                        } else {
                            throw new j("Invalid transform list: " + str2);
                        }
                        break;
                    default:
                        throw new j("Invalid transform list fn: " + o10 + ")");
                }
                if (iVar.h()) {
                    return matrix;
                }
                iVar.z();
            } else {
                throw new j("Bad transform function encountered in transform list: " + str2);
            }
        }
        return matrix;
    }

    private void K(g.C6772s sVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 1) {
                sVar.f41764q = o0(trim);
            } else if (i11 == 2) {
                sVar.f41765r = o0(trim);
            } else if (i11 == 3) {
                g.C6769p o02 = o0(trim);
                sVar.f41766s = o02;
                if (o02.j()) {
                    throw new j("Invalid <mask> element. width cannot be negative");
                }
            } else if (i11 == 4) {
                g.C6769p o03 = o0(trim);
                sVar.f41767t = o03;
                if (o03.j()) {
                    throw new j("Invalid <mask> element. height cannot be negative");
                }
            } else if (i11 != 43) {
                if (i11 != 44) {
                    continue;
                } else if ("objectBoundingBox".equals(trim)) {
                    sVar.f41763p = Boolean.FALSE;
                } else if ("userSpaceOnUse".equals(trim)) {
                    sVar.f41763p = Boolean.TRUE;
                } else {
                    throw new j("Invalid value for attribute maskContentUnits");
                }
            } else if ("objectBoundingBox".equals(trim)) {
                sVar.f41762o = Boolean.FALSE;
            } else if ("userSpaceOnUse".equals(trim)) {
                sVar.f41762o = Boolean.TRUE;
            } else {
                throw new j("Invalid value for attribute maskUnits");
            }
        }
    }

    private void K0(InputStream inputStream) {
        Log.d("SVGParser", "Falling back to SAX parser");
        try {
            SAXParserFactory newInstance = SAXParserFactory.newInstance();
            newInstance.setFeature("http://xml.org/sax/features/external-general-entities", false);
            newInstance.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            XMLReader xMLReader = newInstance.newSAXParser().getXMLReader();
            f fVar = new f(this, (a) null);
            xMLReader.setContentHandler(fVar);
            xMLReader.setProperty("http://xml.org/sax/properties/lexical-handler", fVar);
            xMLReader.parse(new InputSource(inputStream));
        } catch (ParserConfigurationException e10) {
            throw new j("XML parser problem", e10);
        } catch (SAXException e11) {
            throw new j("SVG parse error", e11);
        } catch (IOException e12) {
            throw new j("Stream error", e12);
        }
    }

    private void L(g.C6775v vVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 8) {
                vVar.f41770o = u0(trim);
            } else if (i11 != 9) {
                continue;
            } else {
                Float valueOf = Float.valueOf(f0(trim));
                vVar.f41771p = valueOf;
                if (valueOf.floatValue() < 0.0f) {
                    throw new j("Invalid <path> element. pathLength cannot be negative");
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0047, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:?, code lost:
        android.util.Log.w("SVGParser", "Detected internal entity definitions, but could not parse them.");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x0123, code lost:
        throw new a8.j("XML parser problem", r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:?, code lost:
        return;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:20:0x0047 A[Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }, ExcHandler: XmlPullParserException (r9v1 'e' org.xmlpull.v1.XmlPullParserException A[CUSTOM_DECLARE, Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }]), Splitter:B:0:0x0000] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void L0(java.io.InputStream r9, boolean r10) {
        /*
            r8 = this;
            org.xmlpull.v1.XmlPullParser r0 = android.util.Xml.newPullParser()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            a8.k$j r1 = new a8.k$j     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r1.<init>(r0)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r2 = "http://xmlpull.org/v1/doc/features.html#process-docdecl"
            r3 = 0
            r0.setFeature(r2, r3)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces"
            r4 = 1
            r0.setFeature(r2, r4)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r2 = 0
            r0.setInput(r9, r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            int r2 = r0.getEventType()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
        L_0x001d:
            if (r2 == r4) goto L_0x0110
            if (r2 == 0) goto L_0x0107
            r5 = 8
            java.lang.String r6 = "SVGParser"
            if (r2 == r5) goto L_0x00da
            r5 = 10
            if (r2 == r5) goto L_0x00b2
            r5 = 58
            r6 = 2
            if (r2 == r6) goto L_0x0086
            r7 = 3
            if (r2 == r7) goto L_0x0059
            r5 = 4
            if (r2 == r5) goto L_0x004a
            r5 = 5
            if (r2 == r5) goto L_0x003b
            goto L_0x010a
        L_0x003b:
            java.lang.String r2 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r8.c1(r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            goto L_0x010a
        L_0x0044:
            r9 = move-exception
            goto L_0x0114
        L_0x0047:
            r9 = move-exception
            goto L_0x011c
        L_0x004a:
            int[] r2 = new int[r6]     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            char[] r5 = r0.getTextCharacters(r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6 = r2[r3]     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r2 = r2[r4]     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r8.e1(r5, r6, r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            goto L_0x010a
        L_0x0059:
            java.lang.String r2 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r6 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            if (r6 == 0) goto L_0x0079
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.<init>()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r7 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.append(r7)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.append(r5)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.append(r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r2 = r6.toString()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
        L_0x0079:
            java.lang.String r5 = r0.getNamespace()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r6 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r8.p(r5, r6, r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            goto L_0x010a
        L_0x0086:
            java.lang.String r2 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r6 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            if (r6 == 0) goto L_0x00a6
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.<init>()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r7 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.append(r7)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.append(r5)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r6.append(r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r2 = r6.toString()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
        L_0x00a6:
            java.lang.String r5 = r0.getNamespace()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r6 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r8.X0(r5, r6, r2, r1)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            goto L_0x010a
        L_0x00b2:
            if (r10 == 0) goto L_0x010a
            a8.g r2 = r8.f41841a     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            a8.g$F r2 = r2.m()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            if (r2 != 0) goto L_0x010a
            java.lang.String r2 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r5 = "<!ENTITY "
            boolean r2 = r2.contains(r5)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            if (r2 == 0) goto L_0x010a
            java.lang.String r10 = "Switching to SAX parser to process entities"
            android.util.Log.d(r6, r10)     // Catch:{ IOException -> 0x00d4, XmlPullParserException -> 0x0047 }
            r9.reset()     // Catch:{ IOException -> 0x00d4, XmlPullParserException -> 0x0047 }
            r8.K0(r9)     // Catch:{ IOException -> 0x00d4, XmlPullParserException -> 0x0047 }
            goto L_0x00d9
        L_0x00d4:
            java.lang.String r9 = "Detected internal entity definitions, but could not parse them."
            android.util.Log.w(r6, r9)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
        L_0x00d9:
            return
        L_0x00da:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r2.<init>()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r5 = "PROC INSTR: "
            r2.append(r5)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r5 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r2.append(r5)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r2 = r2.toString()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            android.util.Log.d(r6, r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            a8.k$i r2 = new a8.k$i     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r5 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r2.<init>(r5)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.lang.String r5 = r2.r()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            java.util.Map r2 = r8.x0(r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            r8.r(r5, r2)     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            goto L_0x010a
        L_0x0107:
            r8.W0()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
        L_0x010a:
            int r2 = r0.nextToken()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            goto L_0x001d
        L_0x0110:
            r8.o()     // Catch:{ XmlPullParserException -> 0x0047, IOException -> 0x0044 }
            return
        L_0x0114:
            a8.j r10 = new a8.j
            java.lang.String r0 = "Stream error"
            r10.<init>(r0, r9)
            throw r10
        L_0x011c:
            a8.j r10 = new a8.j
            java.lang.String r0 = "XML parser problem"
            r10.<init>(r0, r9)
            throw r10
        */
        throw new UnsupportedOperationException("Method not decompiled: a8.k.L0(java.io.InputStream, boolean):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:63:0x00cf, code lost:
        continue;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void M(a8.g.C6778y r6, org.xml.sax.Attributes r7) {
        /*
            r5 = this;
            r0 = 0
        L_0x0001:
            int r1 = r7.getLength()
            if (r0 >= r1) goto L_0x00d3
            java.lang.String r1 = r7.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = a8.k.a.f41851b
            java.lang.String r3 = r7.getLocalName(r0)
            a8.k$g r3 = a8.k.g.a(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 1
            if (r2 == r3) goto L_0x00c9
            r3 = 2
            if (r2 == r3) goto L_0x00c2
            r3 = 3
            if (r2 == r3) goto L_0x00ad
            r3 = 4
            if (r2 == r3) goto L_0x0098
            r3 = 6
            if (r2 == r3) goto L_0x007d
            java.lang.String r3 = "userSpaceOnUse"
            java.lang.String r4 = "objectBoundingBox"
            switch(r2) {
                case 40: goto L_0x005f;
                case 41: goto L_0x003f;
                case 42: goto L_0x0037;
                default: goto L_0x0035;
            }
        L_0x0035:
            goto L_0x00cf
        L_0x0037:
            android.graphics.Matrix r1 = r5.J0(r1)
            r6.f41778s = r1
            goto L_0x00cf
        L_0x003f:
            boolean r2 = r4.equals(r1)
            if (r2 == 0) goto L_0x004b
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r6.f41777r = r1
            goto L_0x00cf
        L_0x004b:
            boolean r1 = r3.equals(r1)
            if (r1 == 0) goto L_0x0057
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r6.f41777r = r1
            goto L_0x00cf
        L_0x0057:
            a8.j r6 = new a8.j
            java.lang.String r7 = "Invalid value for attribute patternContentUnits"
            r6.<init>(r7)
            throw r6
        L_0x005f:
            boolean r2 = r4.equals(r1)
            if (r2 == 0) goto L_0x006a
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r6.f41776q = r1
            goto L_0x00cf
        L_0x006a:
            boolean r1 = r3.equals(r1)
            if (r1 == 0) goto L_0x0075
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r6.f41776q = r1
            goto L_0x00cf
        L_0x0075:
            a8.j r6 = new a8.j
            java.lang.String r7 = "Invalid value for attribute patternUnits"
            r6.<init>(r7)
            throw r6
        L_0x007d:
            java.lang.String r2 = ""
            java.lang.String r3 = r7.getURI(r0)
            boolean r2 = r2.equals(r3)
            if (r2 != 0) goto L_0x0095
            java.lang.String r2 = "http://www.w3.org/1999/xlink"
            java.lang.String r3 = r7.getURI(r0)
            boolean r2 = r2.equals(r3)
            if (r2 == 0) goto L_0x00cf
        L_0x0095:
            r6.f41783x = r1
            goto L_0x00cf
        L_0x0098:
            a8.g$p r1 = o0(r1)
            r6.f41782w = r1
            boolean r1 = r1.j()
            if (r1 != 0) goto L_0x00a5
            goto L_0x00cf
        L_0x00a5:
            a8.j r6 = new a8.j
            java.lang.String r7 = "Invalid <pattern> element. height cannot be negative"
            r6.<init>(r7)
            throw r6
        L_0x00ad:
            a8.g$p r1 = o0(r1)
            r6.f41781v = r1
            boolean r1 = r1.j()
            if (r1 != 0) goto L_0x00ba
            goto L_0x00cf
        L_0x00ba:
            a8.j r6 = new a8.j
            java.lang.String r7 = "Invalid <pattern> element. width cannot be negative"
            r6.<init>(r7)
            throw r6
        L_0x00c2:
            a8.g$p r1 = o0(r1)
            r6.f41780u = r1
            goto L_0x00cf
        L_0x00c9:
            a8.g$p r1 = o0(r1)
            r6.f41779t = r1
        L_0x00cf:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x00d3:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: a8.k.M(a8.g$y, org.xml.sax.Attributes):void");
    }

    private static g.E.i M0(String str) {
        str.hashCode();
        if (str.equals("none")) {
            return g.E.i.None;
        }
        if (!str.equals("non-scaling-stroke")) {
            return null;
        }
        return g.E.i.NonScalingStroke;
    }

    private void N(g.C6779z zVar, Attributes attributes, String str) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            if (g.a(attributes.getLocalName(i10)) == g.points) {
                i iVar = new i(attributes.getValue(i10));
                ArrayList<Float> arrayList = new ArrayList<>();
                iVar.A();
                while (!iVar.h()) {
                    float n10 = iVar.n();
                    if (!Float.isNaN(n10)) {
                        iVar.z();
                        float n11 = iVar.n();
                        if (!Float.isNaN(n11)) {
                            iVar.z();
                            arrayList.add(Float.valueOf(n10));
                            arrayList.add(Float.valueOf(n11));
                        } else {
                            throw new j("Invalid <" + str + "> points attribute. There should be an even number of coordinates.");
                        }
                    } else {
                        throw new j("Invalid <" + str + "> points attribute. Non-coordinate content found in list.");
                    }
                }
                zVar.f41784o = new float[arrayList.size()];
                int i11 = 0;
                for (Float floatValue : arrayList) {
                    zVar.f41784o[i11] = floatValue.floatValue();
                    i11++;
                }
            }
        }
    }

    private static g.C6756b N0(String str) {
        i iVar = new i(str);
        iVar.A();
        float n10 = iVar.n();
        iVar.z();
        float n11 = iVar.n();
        iVar.z();
        float n12 = iVar.n();
        iVar.z();
        float n13 = iVar.n();
        if (Float.isNaN(n10) || Float.isNaN(n11) || Float.isNaN(n12) || Float.isNaN(n13)) {
            throw new j("Invalid viewBox definition - should have four numbers");
        } else if (n12 < 0.0f) {
            throw new j("Invalid viewBox. width cannot be negative");
        } else if (n13 >= 0.0f) {
            return new g.C6756b(n10, n11, n12, n13);
        } else {
            throw new j("Invalid viewBox. height cannot be negative");
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:24:0x005b, code lost:
        continue;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void O(a8.g.Q r5, org.xml.sax.Attributes r6) {
        /*
            r4 = this;
            r0 = 0
        L_0x0001:
            int r1 = r6.getLength()
            if (r0 >= r1) goto L_0x005e
            java.lang.String r1 = r6.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = a8.k.a.f41851b
            java.lang.String r3 = r6.getLocalName(r0)
            a8.k$g r3 = a8.k.g.a(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 35
            if (r2 == r3) goto L_0x0055
            r3 = 36
            if (r2 == r3) goto L_0x004e
            switch(r2) {
                case 12: goto L_0x0047;
                case 13: goto L_0x0040;
                case 14: goto L_0x002b;
                default: goto L_0x002a;
            }
        L_0x002a:
            goto L_0x005b
        L_0x002b:
            a8.g$p r1 = o0(r1)
            r5.f41686o = r1
            boolean r1 = r1.j()
            if (r1 != 0) goto L_0x0038
            goto L_0x005b
        L_0x0038:
            a8.j r5 = new a8.j
            java.lang.String r6 = "Invalid <radialGradient> element. r cannot be negative"
            r5.<init>(r6)
            throw r5
        L_0x0040:
            a8.g$p r1 = o0(r1)
            r5.f41685n = r1
            goto L_0x005b
        L_0x0047:
            a8.g$p r1 = o0(r1)
            r5.f41684m = r1
            goto L_0x005b
        L_0x004e:
            a8.g$p r1 = o0(r1)
            r5.f41688q = r1
            goto L_0x005b
        L_0x0055:
            a8.g$p r1 = o0(r1)
            r5.f41687p = r1
        L_0x005b:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x005e:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: a8.k.O(a8.g$Q, org.xml.sax.Attributes):void");
    }

    private void O0(Attributes attributes) {
        l("<path>", new Object[0]);
        if (this.f41842b != null) {
            g.C6775v vVar = new g.C6775v();
            vVar.f41681a = this.f41841a;
            vVar.f41682b = this.f41842b;
            D(vVar, attributes);
            S(vVar, attributes);
            W(vVar, attributes);
            C(vVar, attributes);
            L(vVar, attributes);
            this.f41842b.a(vVar);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void P(g.B b10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 1) {
                b10.f41609o = o0(trim);
            } else if (i11 == 2) {
                b10.f41610p = o0(trim);
            } else if (i11 == 3) {
                g.C6769p o02 = o0(trim);
                b10.f41611q = o02;
                if (o02.j()) {
                    throw new j("Invalid <rect> element. width cannot be negative");
                }
            } else if (i11 == 4) {
                g.C6769p o03 = o0(trim);
                b10.f41612r = o03;
                if (o03.j()) {
                    throw new j("Invalid <rect> element. height cannot be negative");
                }
            } else if (i11 == 10) {
                g.C6769p o04 = o0(trim);
                b10.f41613s = o04;
                if (o04.j()) {
                    throw new j("Invalid <rect> element. rx cannot be negative");
                }
            } else if (i11 != 11) {
                continue;
            } else {
                g.C6769p o05 = o0(trim);
                b10.f41614t = o05;
                if (o05.j()) {
                    throw new j("Invalid <rect> element. ry cannot be negative");
                }
            }
        }
    }

    private void P0(Attributes attributes) {
        l("<pattern>", new Object[0]);
        if (this.f41842b != null) {
            g.C6778y yVar = new g.C6778y();
            yVar.f41681a = this.f41841a;
            yVar.f41682b = this.f41842b;
            D(yVar, attributes);
            S(yVar, attributes);
            C(yVar, attributes);
            Y(yVar, attributes);
            M(yVar, attributes);
            this.f41842b.a(yVar);
            this.f41842b = yVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void Q(g.F f10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 1) {
                f10.f41655q = o0(trim);
            } else if (i11 == 2) {
                f10.f41656r = o0(trim);
            } else if (i11 == 3) {
                g.C6769p o02 = o0(trim);
                f10.f41657s = o02;
                if (o02.j()) {
                    throw new j("Invalid <svg> element. width cannot be negative");
                }
            } else if (i11 == 4) {
                g.C6769p o03 = o0(trim);
                f10.f41658t = o03;
                if (o03.j()) {
                    throw new j("Invalid <svg> element. height cannot be negative");
                }
            } else if (i11 == 5) {
                f10.f41659u = trim;
            }
        }
    }

    private void Q0(Attributes attributes) {
        l("<polygon>", new Object[0]);
        if (this.f41842b != null) {
            g.A a10 = new g.A();
            a10.f41681a = this.f41841a;
            a10.f41682b = this.f41842b;
            D(a10, attributes);
            S(a10, attributes);
            W(a10, attributes);
            C(a10, attributes);
            N(a10, attributes, "polygon");
            this.f41842b.a(a10);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void R(g.D d10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            if (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()] == 37) {
                d10.f41615h = n0(trim);
            }
        }
    }

    private void R0(Attributes attributes) {
        l("<polyline>", new Object[0]);
        if (this.f41842b != null) {
            g.C6779z zVar = new g.C6779z();
            zVar.f41681a = this.f41841a;
            zVar.f41682b = this.f41842b;
            D(zVar, attributes);
            S(zVar, attributes);
            W(zVar, attributes);
            C(zVar, attributes);
            N(zVar, attributes, "polyline");
            this.f41842b.a(zVar);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void S(g.L l10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            if (trim.length() != 0) {
                int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
                if (i11 == 45) {
                    E0(l10, trim);
                } else if (i11 != 46) {
                    if (l10.f41674e == null) {
                        l10.f41674e = new g.E();
                    }
                    S0(l10.f41674e, attributes.getLocalName(i10), attributes.getValue(i10).trim());
                } else {
                    l10.f41676g = C6752b.f(trim);
                }
            }
        }
    }

    static void S0(g.E e10, String str, String str2) {
        if (str2.length() != 0 && !str2.equals("inherit")) {
            switch (a.f41851b[g.a(str).ordinal()]) {
                case 47:
                    g.O t02 = t0(str2);
                    e10.f41630b = t02;
                    if (t02 != null) {
                        e10.f41629a |= 1;
                        return;
                    }
                    return;
                case 48:
                    g.E.a e02 = e0(str2);
                    e10.f41631c = e02;
                    if (e02 != null) {
                        e10.f41629a |= 2;
                        return;
                    }
                    return;
                case 49:
                    Float r02 = r0(str2);
                    e10.f41632d = r02;
                    if (r02 != null) {
                        e10.f41629a |= 4;
                        return;
                    }
                    return;
                case 50:
                    g.O t03 = t0(str2);
                    e10.f41633e = t03;
                    if (t03 != null) {
                        e10.f41629a |= 8;
                        return;
                    }
                    return;
                case 51:
                    Float r03 = r0(str2);
                    e10.f41634f = r03;
                    if (r03 != null) {
                        e10.f41629a |= 16;
                        return;
                    }
                    return;
                case 52:
                    e10.f41635g = o0(str2);
                    e10.f41629a |= 32;
                    return;
                case 53:
                    g.E.c C02 = C0(str2);
                    e10.f41636h = C02;
                    if (C02 != null) {
                        e10.f41629a |= 64;
                        return;
                    }
                    return;
                case 54:
                    g.E.d D02 = D0(str2);
                    e10.f41637i = D02;
                    if (D02 != null) {
                        e10.f41629a |= 128;
                        return;
                    }
                    return;
                case 55:
                    e10.f41638j = Float.valueOf(f0(str2));
                    e10.f41629a |= 256;
                    return;
                case 56:
                    if ("none".equals(str2)) {
                        e10.f41639k = null;
                        e10.f41629a |= 512;
                        return;
                    }
                    g.C6769p[] B02 = B0(str2);
                    e10.f41639k = B02;
                    if (B02 != null) {
                        e10.f41629a |= 512;
                        return;
                    }
                    return;
                case 57:
                    e10.f41640l = o0(str2);
                    e10.f41629a |= 1024;
                    return;
                case 58:
                    e10.f41641m = r0(str2);
                    e10.f41629a |= 2048;
                    return;
                case 59:
                    try {
                        e10.f41642n = b0(str2);
                        e10.f41629a |= 4096;
                        return;
                    } catch (j unused) {
                    }
                case 60:
                    h0(e10, str2);
                    return;
                case 61:
                    List<String> i02 = i0(str2);
                    e10.f41643o = i02;
                    if (i02 != null) {
                        e10.f41629a |= 8192;
                        return;
                    }
                    return;
                case 62:
                    g.C6769p j02 = j0(str2);
                    e10.f41644p = j02;
                    if (j02 != null) {
                        e10.f41629a |= 16384;
                        return;
                    }
                    return;
                case 63:
                    Integer l02 = l0(str2);
                    e10.f41645q = l02;
                    if (l02 != null) {
                        e10.f41629a |= 32768;
                        return;
                    }
                    return;
                case 64:
                    g.E.b k02 = k0(str2);
                    e10.f41646r = k02;
                    if (k02 != null) {
                        e10.f41629a |= 65536;
                        return;
                    }
                    return;
                case 65:
                    g.E.C0735g H02 = H0(str2);
                    e10.f41647s = H02;
                    if (H02 != null) {
                        e10.f41629a |= 131072;
                        return;
                    }
                    return;
                case 66:
                    g.E.h I02 = I0(str2);
                    e10.f41648t = I02;
                    if (I02 != null) {
                        e10.f41629a |= 68719476736L;
                        return;
                    }
                    return;
                case 67:
                    g.E.f G02 = G0(str2);
                    e10.f41649u = G02;
                    if (G02 != null) {
                        e10.f41629a |= 262144;
                        return;
                    }
                    return;
                case 68:
                    Boolean s02 = s0(str2);
                    e10.f41650v = s02;
                    if (s02 != null) {
                        e10.f41629a |= 524288;
                        return;
                    }
                    return;
                case 69:
                    String m02 = m0(str2, str);
                    e10.f41652x = m02;
                    e10.f41653y = m02;
                    e10.f41654z = m02;
                    e10.f41629a |= 14680064;
                    return;
                case 70:
                    e10.f41652x = m0(str2, str);
                    e10.f41629a |= 2097152;
                    return;
                case 71:
                    e10.f41653y = m0(str2, str);
                    e10.f41629a |= 4194304;
                    return;
                case 72:
                    e10.f41654z = m0(str2, str);
                    e10.f41629a |= 8388608;
                    return;
                case 73:
                    if (str2.indexOf(124) < 0) {
                        if ("|inline|block|list-item|run-in|compact|marker|table|inline-table|table-row-group|table-header-group|table-footer-group|table-row|table-column-group|table-column|table-cell|table-caption|none|".contains('|' + str2 + '|')) {
                            e10.f41616A = Boolean.valueOf(!str2.equals("none"));
                            e10.f41629a |= 16777216;
                            return;
                        }
                        return;
                    }
                    return;
                case 74:
                    if (str2.indexOf(124) < 0) {
                        if ("|visible|hidden|collapse|".contains('|' + str2 + '|')) {
                            e10.f41617B = Boolean.valueOf(str2.equals("visible"));
                            e10.f41629a |= 33554432;
                            return;
                        }
                        return;
                    }
                    return;
                case 75:
                    if (str2.equals("currentColor")) {
                        e10.f41618C = g.C0736g.a();
                    } else {
                        try {
                            e10.f41618C = b0(str2);
                        } catch (j e11) {
                            Log.w("SVGParser", e11.getMessage());
                            return;
                        }
                    }
                    e10.f41629a |= 67108864;
                    return;
                case 76:
                    e10.f41619D = r0(str2);
                    e10.f41629a |= 134217728;
                    return;
                case 77:
                    g.C6757c a02 = a0(str2);
                    e10.f41651w = a02;
                    if (a02 != null) {
                        e10.f41629a |= 1048576;
                        return;
                    }
                    return;
                case 78:
                    e10.f41620E = m0(str2, str);
                    e10.f41629a |= 268435456;
                    return;
                case 79:
                    e10.f41621F = e0(str2);
                    e10.f41629a |= 536870912;
                    return;
                case 80:
                    e10.f41622G = m0(str2, str);
                    e10.f41629a |= 1073741824;
                    return;
                case 81:
                    if (str2.equals("currentColor")) {
                        e10.f41623H = g.C0736g.a();
                    } else {
                        try {
                            e10.f41623H = b0(str2);
                        } catch (j e12) {
                            Log.w("SVGParser", e12.getMessage());
                            return;
                        }
                    }
                    e10.f41629a |= 2147483648L;
                    return;
                case 82:
                    e10.f41624I = r0(str2);
                    e10.f41629a |= 4294967296L;
                    return;
                case 83:
                    if (str2.equals("currentColor")) {
                        e10.f41625J = g.C0736g.a();
                    } else {
                        try {
                            e10.f41625J = b0(str2);
                        } catch (j e13) {
                            Log.w("SVGParser", e13.getMessage());
                            return;
                        }
                    }
                    e10.f41629a |= 8589934592L;
                    return;
                case 84:
                    e10.f41626K = r0(str2);
                    e10.f41629a |= 17179869184L;
                    return;
                case 85:
                    g.E.i M02 = M0(str2);
                    e10.f41627L = M02;
                    if (M02 != null) {
                        e10.f41629a |= 34359738368L;
                        return;
                    }
                    return;
                case 86:
                    g.E.e y02 = y0(str2);
                    e10.f41628M = y02;
                    if (y02 != null) {
                        e10.f41629a |= 137438953472L;
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    private void T(g.U u10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            if (a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()] == 6 && ("".equals(attributes.getURI(i10)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i10)))) {
                u10.f41690o = trim;
            }
        }
    }

    private void T0(Attributes attributes) {
        l("<radialGradient>", new Object[0]);
        if (this.f41842b != null) {
            g.Q q10 = new g.Q();
            q10.f41681a = this.f41841a;
            q10.f41682b = this.f41842b;
            D(q10, attributes);
            S(q10, attributes);
            F(q10, attributes);
            O(q10, attributes);
            this.f41842b.a(q10);
            this.f41842b = q10;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void U(g.Z z10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 != 6) {
                if (i11 == 39) {
                    z10.f41695p = o0(trim);
                }
            } else if ("".equals(attributes.getURI(i10)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i10))) {
                z10.f41694o = trim;
            }
        }
    }

    private void U0(Attributes attributes) {
        l("<rect>", new Object[0]);
        if (this.f41842b != null) {
            g.B b10 = new g.B();
            b10.f41681a = this.f41841a;
            b10.f41682b = this.f41842b;
            D(b10, attributes);
            S(b10, attributes);
            W(b10, attributes);
            C(b10, attributes);
            P(b10, attributes);
            this.f41842b.a(b10);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void V(g.a0 a0Var, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 1) {
                a0Var.f41698o = p0(trim);
            } else if (i11 == 2) {
                a0Var.f41699p = p0(trim);
            } else if (i11 == 19) {
                a0Var.f41700q = p0(trim);
            } else if (i11 == 20) {
                a0Var.f41701r = p0(trim);
            }
        }
    }

    private void V0(Attributes attributes) {
        l("<solidColor>", new Object[0]);
        if (this.f41842b != null) {
            g.C c10 = new g.C();
            c10.f41681a = this.f41841a;
            c10.f41682b = this.f41842b;
            D(c10, attributes);
            S(c10, attributes);
            this.f41842b.a(c10);
            this.f41842b = c10;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void W(g.C6767n nVar, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            if (g.a(attributes.getLocalName(i10)) == g.transform) {
                nVar.l(J0(attributes.getValue(i10)));
            }
        }
    }

    /* access modifiers changed from: private */
    public void W0() {
        this.f41841a = new g();
    }

    private void X(g.e0 e0Var, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 1) {
                e0Var.f41725q = o0(trim);
            } else if (i11 == 2) {
                e0Var.f41726r = o0(trim);
            } else if (i11 == 3) {
                g.C6769p o02 = o0(trim);
                e0Var.f41727s = o02;
                if (o02.j()) {
                    throw new j("Invalid <use> element. width cannot be negative");
                }
            } else if (i11 == 4) {
                g.C6769p o03 = o0(trim);
                e0Var.f41728t = o03;
                if (o03.j()) {
                    throw new j("Invalid <use> element. height cannot be negative");
                }
            } else if (i11 == 6 && ("".equals(attributes.getURI(i10)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i10)))) {
                e0Var.f41724p = trim;
            }
        }
    }

    /* access modifiers changed from: private */
    public void X0(String str, String str2, String str3, Attributes attributes) {
        if (this.f41843c) {
            this.f41844d++;
        } else if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            h a10 = h.a(str2);
            switch (a.f41850a[a10.ordinal()]) {
                case 1:
                    a1(attributes);
                    return;
                case 2:
                case 3:
                    q(attributes);
                    return;
                case 4:
                    m(attributes);
                    return;
                case 5:
                    i1(attributes);
                    return;
                case 6:
                    O0(attributes);
                    return;
                case 7:
                    U0(attributes);
                    return;
                case 8:
                    i(attributes);
                    return;
                case 9:
                    n(attributes);
                    return;
                case 10:
                    v(attributes);
                    return;
                case 11:
                    R0(attributes);
                    return;
                case 12:
                    Q0(attributes);
                    return;
                case 13:
                    d1(attributes);
                    return;
                case 14:
                    h1(attributes);
                    return;
                case 15:
                    g1(attributes);
                    return;
                case 16:
                    k1(attributes);
                    return;
                case 17:
                    b1(attributes);
                    return;
                case 18:
                    x(attributes);
                    return;
                case 19:
                    w(attributes);
                    return;
                case 20:
                    T0(attributes);
                    return;
                case 21:
                    Y0(attributes);
                    return;
                case 22:
                case M.RESPONSE_BODY_ATTRIBUTES_FIELD_NUMBER /*23*/:
                    this.f41845e = true;
                    this.f41846f = a10;
                    return;
                case BuildConfig.MIN_SDK_VERSION /*24*/:
                    k(attributes);
                    return;
                case 25:
                    f1(attributes);
                    return;
                case 26:
                    P0(attributes);
                    return;
                case 27:
                    u(attributes);
                    return;
                case 28:
                    j1(attributes);
                    return;
                case 29:
                    y(attributes);
                    return;
                case 30:
                    Z0(attributes);
                    return;
                case 31:
                    V0(attributes);
                    return;
                default:
                    this.f41843c = true;
                    this.f41844d = 1;
                    return;
            }
        }
    }

    private void Y(g.R r10, Attributes attributes) {
        for (int i10 = 0; i10 < attributes.getLength(); i10++) {
            String trim = attributes.getValue(i10).trim();
            int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
            if (i11 == 7) {
                w0(r10, trim);
            } else if (i11 == 87) {
                r10.f41689p = N0(trim);
            }
        }
    }

    private void Y0(Attributes attributes) {
        l("<stop>", new Object[0]);
        g.J j10 = this.f41842b;
        if (j10 == null) {
            throw new j("Invalid document. Root element must be <svg>");
        } else if (j10 instanceof g.C6763j) {
            g.D d10 = new g.D();
            d10.f41681a = this.f41841a;
            d10.f41682b = this.f41842b;
            D(d10, attributes);
            S(d10, attributes);
            R(d10, attributes);
            this.f41842b.a(d10);
            this.f41842b = d10;
        } else {
            throw new j("Invalid document. <stop> elements are only valid inside <linearGradient> or <radialGradient> elements.");
        }
    }

    private void Z(String str) {
        this.f41841a.a(new C6752b(C6752b.f.screen, C6752b.u.Document).d(str));
    }

    private void Z0(Attributes attributes) {
        l("<style>", new Object[0]);
        if (this.f41842b != null) {
            String str = "all";
            boolean z10 = true;
            for (int i10 = 0; i10 < attributes.getLength(); i10++) {
                String trim = attributes.getValue(i10).trim();
                int i11 = a.f41851b[g.a(attributes.getLocalName(i10)).ordinal()];
                if (i11 == 88) {
                    z10 = trim.equals("text/css");
                } else if (i11 == 89) {
                    str = trim;
                }
            }
            if (!z10 || !C6752b.b(str, C6752b.f.screen)) {
                this.f41843c = true;
                this.f41844d = 1;
                return;
            }
            this.f41848h = true;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static g.C6757c a0(String str) {
        if ("auto".equals(str) || !str.startsWith("rect(")) {
            return null;
        }
        i iVar = new i(str.substring(5));
        iVar.A();
        g.C6769p q02 = q0(iVar);
        iVar.z();
        g.C6769p q03 = q0(iVar);
        iVar.z();
        g.C6769p q04 = q0(iVar);
        iVar.z();
        g.C6769p q05 = q0(iVar);
        iVar.A();
        if (iVar.f(')') || iVar.h()) {
            return new g.C6757c(q02, q03, q04, q05);
        }
        return null;
    }

    private void a1(Attributes attributes) {
        l("<svg>", new Object[0]);
        g.F f10 = new g.F();
        f10.f41681a = this.f41841a;
        f10.f41682b = this.f41842b;
        D(f10, attributes);
        S(f10, attributes);
        C(f10, attributes);
        Y(f10, attributes);
        Q(f10, attributes);
        g.J j10 = this.f41842b;
        if (j10 == null) {
            this.f41841a.C(f10);
        } else {
            j10.a(f10);
        }
        this.f41842b = f10;
    }

    private static g.C6760f b0(String str) {
        int i10 = 5;
        if (str.charAt(0) == '#') {
            C6753c b10 = C6753c.b(str, 1, str.length());
            if (b10 != null) {
                int a10 = b10.a();
                if (a10 == 4) {
                    int d10 = b10.d();
                    int i11 = d10 & 3840;
                    int i12 = d10 & 240;
                    int i13 = d10 & 15;
                    return new g.C6760f(i13 | (i11 << 8) | -16777216 | (i11 << 12) | (i12 << 8) | (i12 << 4) | (i13 << 4));
                } else if (a10 == 5) {
                    int d11 = b10.d();
                    int i14 = 61440 & d11;
                    int i15 = d11 & 3840;
                    int i16 = d11 & 240;
                    int i17 = d11 & 15;
                    return new g.C6760f((i17 << 24) | (i17 << 28) | (i14 << 8) | (i14 << 4) | (i15 << 4) | i15 | i16 | (i16 >> 4));
                } else if (a10 == 7) {
                    return new g.C6760f(b10.d() | -16777216);
                } else {
                    if (a10 == 9) {
                        return new g.C6760f((b10.d() >>> 8) | (b10.d() << 24));
                    }
                    throw new j("Bad hex colour value: " + str);
                }
            } else {
                throw new j("Bad hex colour value: " + str);
            }
        } else {
            String lowerCase = str.toLowerCase(Locale.US);
            boolean startsWith = lowerCase.startsWith("rgba(");
            if (startsWith || lowerCase.startsWith("rgb(")) {
                if (!startsWith) {
                    i10 = 4;
                }
                i iVar = new i(str.substring(i10));
                iVar.A();
                float n10 = iVar.n();
                if (!Float.isNaN(n10) && iVar.f('%')) {
                    n10 = (n10 * 256.0f) / 100.0f;
                }
                float d12 = iVar.d(n10);
                if (!Float.isNaN(d12) && iVar.f('%')) {
                    d12 = (d12 * 256.0f) / 100.0f;
                }
                float d13 = iVar.d(d12);
                if (!Float.isNaN(d13) && iVar.f('%')) {
                    d13 = (d13 * 256.0f) / 100.0f;
                }
                if (startsWith) {
                    float d14 = iVar.d(d13);
                    iVar.A();
                    if (!Float.isNaN(d14) && iVar.f(')')) {
                        return new g.C6760f((j(d14 * 256.0f) << 24) | (j(n10) << 16) | (j(d12) << 8) | j(d13));
                    }
                    throw new j("Bad rgba() colour value: " + str);
                }
                iVar.A();
                if (!Float.isNaN(d13) && iVar.f(')')) {
                    return new g.C6760f((j(n10) << 16) | -16777216 | (j(d12) << 8) | j(d13));
                }
                throw new j("Bad rgb() colour value: " + str);
            }
            boolean startsWith2 = lowerCase.startsWith("hsla(");
            if (!startsWith2 && !lowerCase.startsWith("hsl(")) {
                return c0(lowerCase);
            }
            if (!startsWith2) {
                i10 = 4;
            }
            i iVar2 = new i(str.substring(i10));
            iVar2.A();
            float n11 = iVar2.n();
            float d15 = iVar2.d(n11);
            if (!Float.isNaN(d15)) {
                iVar2.f('%');
            }
            float d16 = iVar2.d(d15);
            if (!Float.isNaN(d16)) {
                iVar2.f('%');
            }
            if (startsWith2) {
                float d17 = iVar2.d(d16);
                iVar2.A();
                if (!Float.isNaN(d17) && iVar2.f(')')) {
                    return new g.C6760f((j(d17 * 256.0f) << 24) | s(n11, d15, d16));
                }
                throw new j("Bad hsla() colour value: " + str);
            }
            iVar2.A();
            if (!Float.isNaN(d16) && iVar2.f(')')) {
                return new g.C6760f(s(n11, d15, d16) | -16777216);
            }
            throw new j("Bad hsl() colour value: " + str);
        }
    }

    private void b1(Attributes attributes) {
        l("<symbol>", new Object[0]);
        if (this.f41842b != null) {
            g.T t10 = new g.T();
            t10.f41681a = this.f41841a;
            t10.f41682b = this.f41842b;
            D(t10, attributes);
            S(t10, attributes);
            C(t10, attributes);
            Y(t10, attributes);
            this.f41842b.a(t10);
            this.f41842b = t10;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static g.C6760f c0(String str) {
        Integer a10 = c.a(str);
        if (a10 != null) {
            return new g.C6760f(a10.intValue());
        }
        throw new j("Invalid colour keyword: " + str);
    }

    /* access modifiers changed from: private */
    public void c1(String str) {
        if (!this.f41843c) {
            if (this.f41845e) {
                if (this.f41847g == null) {
                    this.f41847g = new StringBuilder(str.length());
                }
                this.f41847g.append(str);
            } else if (this.f41848h) {
                if (this.f41849i == null) {
                    this.f41849i = new StringBuilder(str.length());
                }
                this.f41849i.append(str);
            } else if (this.f41842b instanceof g.Y) {
                h(str);
            }
        }
    }

    private static g.O d0(String str) {
        str.hashCode();
        if (str.equals("none")) {
            return g.C6760f.f41730c;
        }
        if (str.equals("currentColor")) {
            return g.C0736g.a();
        }
        try {
            return b0(str);
        } catch (j unused) {
            return null;
        }
    }

    private void d1(Attributes attributes) {
        l("<text>", new Object[0]);
        if (this.f41842b != null) {
            g.W w10 = new g.W();
            w10.f41681a = this.f41841a;
            w10.f41682b = this.f41842b;
            D(w10, attributes);
            S(w10, attributes);
            W(w10, attributes);
            C(w10, attributes);
            V(w10, attributes);
            this.f41842b.a(w10);
            this.f41842b = w10;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static g.E.a e0(String str) {
        if ("nonzero".equals(str)) {
            return g.E.a.NonZero;
        }
        if ("evenodd".equals(str)) {
            return g.E.a.EvenOdd;
        }
        return null;
    }

    private void e1(char[] cArr, int i10, int i11) {
        if (!this.f41843c) {
            if (this.f41845e) {
                if (this.f41847g == null) {
                    this.f41847g = new StringBuilder(i11);
                }
                this.f41847g.append(cArr, i10, i11);
            } else if (this.f41848h) {
                if (this.f41849i == null) {
                    this.f41849i = new StringBuilder(i11);
                }
                this.f41849i.append(cArr, i10, i11);
            } else if (this.f41842b instanceof g.Y) {
                h(new String(cArr, i10, i11));
            }
        }
    }

    private static float f0(String str) {
        int length = str.length();
        if (length != 0) {
            return g0(str, 0, length);
        }
        throw new j("Invalid float value (empty string)");
    }

    private void f1(Attributes attributes) {
        l("<textPath>", new Object[0]);
        if (this.f41842b != null) {
            g.Z z10 = new g.Z();
            z10.f41681a = this.f41841a;
            z10.f41682b = this.f41842b;
            D(z10, attributes);
            S(z10, attributes);
            C(z10, attributes);
            U(z10, attributes);
            this.f41842b.a(z10);
            this.f41842b = z10;
            g.J j10 = z10.f41682b;
            if (j10 instanceof g.b0) {
                z10.p((g.b0) j10);
            } else {
                z10.p(((g.X) j10).f());
            }
        } else {
            throw new j("Invalid document. Root element must be <svg>");
        }
    }

    private static float g0(String str, int i10, int i11) {
        float b10 = new C6754d().b(str, i10, i11);
        if (!Float.isNaN(b10)) {
            return b10;
        }
        throw new j("Invalid float value: " + str);
    }

    private void g1(Attributes attributes) {
        l("<tref>", new Object[0]);
        g.J j10 = this.f41842b;
        if (j10 == null) {
            throw new j("Invalid document. Root element must be <svg>");
        } else if (j10 instanceof g.Y) {
            g.U u10 = new g.U();
            u10.f41681a = this.f41841a;
            u10.f41682b = this.f41842b;
            D(u10, attributes);
            S(u10, attributes);
            C(u10, attributes);
            T(u10, attributes);
            this.f41842b.a(u10);
            g.J j11 = u10.f41682b;
            if (j11 instanceof g.b0) {
                u10.p((g.b0) j11);
            } else {
                u10.p(((g.X) j11).f());
            }
        } else {
            throw new j("Invalid document. <tref> elements are only valid inside <text> or <tspan> elements.");
        }
    }

    private void h(String str) {
        g.H h10 = (g.H) this.f41842b;
        int size = h10.f41660i.size();
        g.N n10 = size == 0 ? null : h10.f41660i.get(size - 1);
        if (n10 instanceof g.c0) {
            StringBuilder sb2 = new StringBuilder();
            g.c0 c0Var = (g.c0) n10;
            sb2.append(c0Var.f41710c);
            sb2.append(str);
            c0Var.f41710c = sb2.toString();
            return;
        }
        this.f41842b.a(new g.c0(str));
    }

    private static void h0(g.E e10, String str) {
        String s10;
        if ("|caption|icon|menu|message-box|small-caption|status-bar|".contains('|' + str + '|')) {
            i iVar = new i(str);
            Integer num = null;
            g.E.b bVar = null;
            String str2 = null;
            while (true) {
                s10 = iVar.s('/');
                iVar.A();
                if (s10 != null) {
                    if (num == null || bVar == null) {
                        if (!s10.equals(Constants.NORMAL) && ((num != null || (num = e.a(s10)) == null) && (bVar != null || (bVar = k0(s10)) == null))) {
                            if (str2 != null || !s10.equals("small-caps")) {
                                break;
                            }
                            str2 = s10;
                        }
                    } else {
                        break;
                    }
                } else {
                    return;
                }
            }
            g.C6769p j02 = j0(s10);
            if (iVar.f('/')) {
                iVar.A();
                String r10 = iVar.r();
                if (r10 != null) {
                    try {
                        o0(r10);
                    } catch (j unused) {
                        return;
                    }
                }
                iVar.A();
            }
            e10.f41643o = i0(iVar.y());
            e10.f41644p = j02;
            e10.f41645q = Integer.valueOf(num == null ? Constants.MINIMAL_ERROR_STATUS_CODE : num.intValue());
            if (bVar == null) {
                bVar = g.E.b.Normal;
            }
            e10.f41646r = bVar;
            e10.f41629a |= 122880;
        }
    }

    private void h1(Attributes attributes) {
        l("<tspan>", new Object[0]);
        g.J j10 = this.f41842b;
        if (j10 == null) {
            throw new j("Invalid document. Root element must be <svg>");
        } else if (j10 instanceof g.Y) {
            g.V v10 = new g.V();
            v10.f41681a = this.f41841a;
            v10.f41682b = this.f41842b;
            D(v10, attributes);
            S(v10, attributes);
            C(v10, attributes);
            V(v10, attributes);
            this.f41842b.a(v10);
            this.f41842b = v10;
            g.J j11 = v10.f41682b;
            if (j11 instanceof g.b0) {
                v10.p((g.b0) j11);
            } else {
                v10.p(((g.X) j11).f());
            }
        } else {
            throw new j("Invalid document. <tspan> elements are only valid inside <text> or other <tspan> elements.");
        }
    }

    private void i(Attributes attributes) {
        l("<circle>", new Object[0]);
        if (this.f41842b != null) {
            g.C6758d dVar = new g.C6758d();
            dVar.f41681a = this.f41841a;
            dVar.f41682b = this.f41842b;
            D(dVar, attributes);
            S(dVar, attributes);
            W(dVar, attributes);
            C(dVar, attributes);
            A(dVar, attributes);
            this.f41842b.a(dVar);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static List<String> i0(String str) {
        i iVar = new i(str);
        ArrayList arrayList = null;
        do {
            String q10 = iVar.q();
            if (q10 == null) {
                q10 = iVar.u(',');
            }
            if (q10 == null) {
                break;
            }
            if (arrayList == null) {
                arrayList = new ArrayList();
            }
            arrayList.add(q10);
            iVar.z();
        } while (!iVar.h());
        return arrayList;
    }

    private void i1(Attributes attributes) {
        l("<use>", new Object[0]);
        if (this.f41842b != null) {
            g.e0 e0Var = new g.e0();
            e0Var.f41681a = this.f41841a;
            e0Var.f41682b = this.f41842b;
            D(e0Var, attributes);
            S(e0Var, attributes);
            W(e0Var, attributes);
            C(e0Var, attributes);
            X(e0Var, attributes);
            this.f41842b.a(e0Var);
            this.f41842b = e0Var;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static int j(float f10) {
        if (f10 < 0.0f) {
            return 0;
        }
        if (f10 > 255.0f) {
            return 255;
        }
        return Math.round(f10);
    }

    private static g.C6769p j0(String str) {
        try {
            g.C6769p a10 = d.a(str);
            return a10 == null ? o0(str) : a10;
        } catch (j unused) {
            return null;
        }
    }

    private void j1(Attributes attributes) {
        l("<view>", new Object[0]);
        if (this.f41842b != null) {
            g.f0 f0Var = new g.f0();
            f0Var.f41681a = this.f41841a;
            f0Var.f41682b = this.f41842b;
            D(f0Var, attributes);
            C(f0Var, attributes);
            Y(f0Var, attributes);
            this.f41842b.a(f0Var);
            this.f41842b = f0Var;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void k(Attributes attributes) {
        l("<clipPath>", new Object[0]);
        if (this.f41842b != null) {
            g.C6759e eVar = new g.C6759e();
            eVar.f41681a = this.f41841a;
            eVar.f41682b = this.f41842b;
            D(eVar, attributes);
            S(eVar, attributes);
            W(eVar, attributes);
            C(eVar, attributes);
            B(eVar, attributes);
            this.f41842b.a(eVar);
            this.f41842b = eVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static g.E.b k0(String str) {
        str.hashCode();
        char c10 = 65535;
        switch (str.hashCode()) {
            case -1657669071:
                if (str.equals("oblique")) {
                    c10 = 0;
                    break;
                }
                break;
            case -1178781136:
                if (str.equals("italic")) {
                    c10 = 1;
                    break;
                }
                break;
            case -1039745817:
                if (str.equals(Constants.NORMAL)) {
                    c10 = 2;
                    break;
                }
                break;
        }
        switch (c10) {
            case 0:
                return g.E.b.Oblique;
            case 1:
                return g.E.b.Italic;
            case 2:
                return g.E.b.Normal;
            default:
                return null;
        }
    }

    private void k1(Attributes attributes) {
        l("<switch>", new Object[0]);
        if (this.f41842b != null) {
            g.S s10 = new g.S();
            s10.f41681a = this.f41841a;
            s10.f41682b = this.f41842b;
            D(s10, attributes);
            S(s10, attributes);
            W(s10, attributes);
            C(s10, attributes);
            this.f41842b.a(s10);
            this.f41842b = s10;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private void l(String str, Object... objArr) {
    }

    private static Integer l0(String str) {
        return e.a(str);
    }

    private void m(Attributes attributes) {
        l("<defs>", new Object[0]);
        if (this.f41842b != null) {
            g.C6761h hVar = new g.C6761h();
            hVar.f41681a = this.f41841a;
            hVar.f41682b = this.f41842b;
            D(hVar, attributes);
            S(hVar, attributes);
            W(hVar, attributes);
            this.f41842b.a(hVar);
            this.f41842b = hVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static String m0(String str, String str2) {
        if (!str.equals("none") && str.startsWith("url(")) {
            return str.endsWith(")") ? str.substring(4, str.length() - 1).trim() : str.substring(4).trim();
        }
        return null;
    }

    private void n(Attributes attributes) {
        l("<ellipse>", new Object[0]);
        if (this.f41842b != null) {
            g.C6762i iVar = new g.C6762i();
            iVar.f41681a = this.f41841a;
            iVar.f41682b = this.f41842b;
            D(iVar, attributes);
            S(iVar, attributes);
            W(iVar, attributes);
            C(iVar, attributes);
            E(iVar, attributes);
            this.f41842b.a(iVar);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private Float n0(String str) {
        if (str.length() != 0) {
            int length = str.length();
            boolean z10 = true;
            if (str.charAt(str.length() - 1) == '%') {
                length--;
            } else {
                z10 = false;
            }
            try {
                float g02 = g0(str, 0, length);
                float f10 = 100.0f;
                if (z10) {
                    g02 /= 100.0f;
                }
                if (g02 < 0.0f) {
                    f10 = 0.0f;
                } else if (g02 <= 100.0f) {
                    f10 = g02;
                }
                return Float.valueOf(f10);
            } catch (NumberFormatException e10) {
                throw new j("Invalid offset value in <stop>: " + str, e10);
            }
        } else {
            throw new j("Invalid offset value in <stop> (empty string)");
        }
    }

    /* access modifiers changed from: private */
    public void o() {
    }

    static g.C6769p o0(String str) {
        if (str.length() != 0) {
            int length = str.length();
            g.d0 d0Var = g.d0.px;
            char charAt = str.charAt(length - 1);
            if (charAt == '%') {
                length--;
                d0Var = g.d0.percent;
            } else if (length > 2 && Character.isLetter(charAt) && Character.isLetter(str.charAt(length - 2))) {
                length -= 2;
                try {
                    d0Var = g.d0.valueOf(str.substring(length).toLowerCase(Locale.US));
                } catch (IllegalArgumentException unused) {
                    throw new j("Invalid length unit specifier: " + str);
                }
            }
            try {
                return new g.C6769p(g0(str, 0, length), d0Var);
            } catch (NumberFormatException e10) {
                throw new j("Invalid length value: " + str, e10);
            }
        } else {
            throw new j("Invalid length value (empty string)");
        }
    }

    /* access modifiers changed from: private */
    public void p(String str, String str2, String str3) {
        if (this.f41843c) {
            int i10 = this.f41844d - 1;
            this.f41844d = i10;
            if (i10 == 0) {
                this.f41843c = false;
                return;
            }
        }
        if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            int i11 = a.f41850a[h.a(str2).ordinal()];
            if (!(i11 == 1 || i11 == 2 || i11 == 4 || i11 == 5 || i11 == 13 || i11 == 14)) {
                switch (i11) {
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case BuildConfig.MIN_SDK_VERSION /*24*/:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 31:
                        break;
                    case 22:
                    case M.RESPONSE_BODY_ATTRIBUTES_FIELD_NUMBER /*23*/:
                        this.f41845e = false;
                        StringBuilder sb2 = this.f41847g;
                        if (sb2 != null) {
                            h hVar = this.f41846f;
                            if (hVar == h.title) {
                                this.f41841a.D(sb2.toString());
                            } else if (hVar == h.desc) {
                                this.f41841a.v(sb2.toString());
                            }
                            this.f41847g.setLength(0);
                            return;
                        }
                        return;
                    case 30:
                        StringBuilder sb3 = this.f41849i;
                        if (sb3 != null) {
                            this.f41848h = false;
                            Z(sb3.toString());
                            this.f41849i.setLength(0);
                            return;
                        }
                        return;
                    default:
                        return;
                }
            }
            this.f41842b = ((g.N) this.f41842b).f41682b;
        }
    }

    private static List<g.C6769p> p0(String str) {
        if (str.length() != 0) {
            ArrayList arrayList = new ArrayList(1);
            i iVar = new i(str);
            iVar.A();
            while (!iVar.h()) {
                float n10 = iVar.n();
                if (!Float.isNaN(n10)) {
                    g.d0 v10 = iVar.v();
                    if (v10 == null) {
                        v10 = g.d0.px;
                    }
                    arrayList.add(new g.C6769p(n10, v10));
                    iVar.z();
                } else {
                    throw new j("Invalid length list value: " + iVar.b());
                }
            }
            return arrayList;
        }
        throw new j("Invalid length list (empty string)");
    }

    private void q(Attributes attributes) {
        l("<g>", new Object[0]);
        if (this.f41842b != null) {
            g.C6766m mVar = new g.C6766m();
            mVar.f41681a = this.f41841a;
            mVar.f41682b = this.f41842b;
            D(mVar, attributes);
            S(mVar, attributes);
            W(mVar, attributes);
            C(mVar, attributes);
            this.f41842b.a(mVar);
            this.f41842b = mVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static g.C6769p q0(i iVar) {
        return iVar.g("auto") ? new g.C6769p(0.0f) : iVar.p();
    }

    /* access modifiers changed from: private */
    public void r(String str, Map<String, String> map) {
        String str2;
        String b10;
        if (str.equals("xml-stylesheet") && g.k() != null) {
            if (map.get("type") != null && !"text/css".equals(map.get("type"))) {
                return;
            }
            if ((map.get("alternate") == null || "no".equals(map.get("alternate"))) && (str2 = map.get("href")) != null && (b10 = g.k().b(str2)) != null) {
                String str3 = map.get("media");
                if (str3 != null && !"all".equals(str3.trim())) {
                    b10 = "@media " + str3 + " { " + b10 + "}";
                }
                Z(b10);
            }
        }
    }

    private static Float r0(String str) {
        try {
            float f02 = f0(str);
            float f10 = 0.0f;
            if (f02 >= 0.0f) {
                f10 = 1.0f;
                if (f02 > 1.0f) {
                }
                return Float.valueOf(f02);
            }
            f02 = f10;
            return Float.valueOf(f02);
        } catch (j unused) {
            return null;
        }
    }

    private static int s(float f10, float f11, float f12) {
        float f13 = 0.0f;
        int i10 = (f10 > 0.0f ? 1 : (f10 == 0.0f ? 0 : -1));
        float f14 = f10 % 360.0f;
        if (i10 < 0) {
            f14 += 360.0f;
        }
        float f15 = f14 / 60.0f;
        float f16 = f11 / 100.0f;
        float f17 = f12 / 100.0f;
        if (f16 < 0.0f) {
            f16 = 0.0f;
        } else if (f16 > 1.0f) {
            f16 = 1.0f;
        }
        if (f17 >= 0.0f) {
            f13 = f17 > 1.0f ? 1.0f : f17;
        }
        float f18 = f13 <= 0.5f ? (f16 + 1.0f) * f13 : (f13 + f16) - (f16 * f13);
        float f19 = (f13 * 2.0f) - f18;
        return j(t(f19, f18, f15 - 2.0f) * 256.0f) | (j(t(f19, f18, f15 + 2.0f) * 256.0f) << 16) | (j(t(f19, f18, f15) * 256.0f) << 8);
    }

    private static Boolean s0(String str) {
        str.hashCode();
        char c10 = 65535;
        switch (str.hashCode()) {
            case -1217487446:
                if (str.equals("hidden")) {
                    c10 = 0;
                    break;
                }
                break;
            case -907680051:
                if (str.equals("scroll")) {
                    c10 = 1;
                    break;
                }
                break;
            case 3005871:
                if (str.equals("auto")) {
                    c10 = 2;
                    break;
                }
                break;
            case 466743410:
                if (str.equals("visible")) {
                    c10 = 3;
                    break;
                }
                break;
        }
        switch (c10) {
            case 0:
            case 1:
                return Boolean.FALSE;
            case 2:
            case 3:
                return Boolean.TRUE;
            default:
                return null;
        }
    }

    private static float t(float f10, float f11, float f12) {
        float f13;
        if (f12 < 0.0f) {
            f12 += 6.0f;
        }
        if (f12 >= 6.0f) {
            f12 -= 6.0f;
        }
        if (f12 < 1.0f) {
            f13 = (f11 - f10) * f12;
        } else if (f12 < 3.0f) {
            return f11;
        } else {
            if (f12 >= 4.0f) {
                return f10;
            }
            f13 = (f11 - f10) * (4.0f - f12);
        }
        return f13 + f10;
    }

    private static g.O t0(String str) {
        if (!str.startsWith("url(")) {
            return d0(str);
        }
        int indexOf = str.indexOf(")");
        g.O o10 = null;
        if (indexOf == -1) {
            return new g.C6774u(str.substring(4).trim(), (g.O) null);
        }
        String trim = str.substring(4, indexOf).trim();
        String trim2 = str.substring(indexOf + 1).trim();
        if (trim2.length() > 0) {
            o10 = d0(trim2);
        }
        return new g.C6774u(trim, o10);
    }

    private void u(Attributes attributes) {
        l("<image>", new Object[0]);
        if (this.f41842b != null) {
            g.C6768o oVar = new g.C6768o();
            oVar.f41681a = this.f41841a;
            oVar.f41682b = this.f41842b;
            D(oVar, attributes);
            S(oVar, attributes);
            W(oVar, attributes);
            C(oVar, attributes);
            G(oVar, attributes);
            this.f41842b.a(oVar);
            this.f41842b = oVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0042, code lost:
        r4 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00f3, code lost:
        r2 = r8;
        r1 = r11;
        r4 = r15;
        r3 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x0272, code lost:
        r0.z();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x0279, code lost:
        if (r0.h() == false) goto L_0x027c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x027b, code lost:
        return r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x0280, code lost:
        if (r0.i() == false) goto L_0x028a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x0282, code lost:
        r12 = r0.l().intValue();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static a8.g.C6776w u0(java.lang.String r20) {
        /*
            a8.k$i r0 = new a8.k$i
            r1 = r20
            r0.<init>(r1)
            a8.g$w r9 = new a8.g$w
            r9.<init>()
            boolean r1 = r0.h()
            if (r1 == 0) goto L_0x0013
            return r9
        L_0x0013:
            java.lang.Integer r1 = r0.l()
            int r1 = r1.intValue()
            r2 = 77
            r10 = 109(0x6d, float:1.53E-43)
            if (r1 == r2) goto L_0x0024
            if (r1 == r10) goto L_0x0024
            return r9
        L_0x0024:
            r12 = r1
            r1 = 0
            r2 = 0
            r3 = 0
            r4 = 0
            r13 = 0
            r14 = 0
        L_0x002b:
            r0.A()
            r5 = 108(0x6c, float:1.51E-43)
            r6 = 1073741824(0x40000000, float:2.0)
            java.lang.String r7 = " path segment"
            java.lang.String r8 = "Bad path coords for "
            java.lang.String r15 = "SVGParser"
            switch(r12) {
                case 65: goto L_0x0222;
                case 67: goto L_0x01d4;
                case 72: goto L_0x01a7;
                case 76: goto L_0x0176;
                case 77: goto L_0x0136;
                case 81: goto L_0x00fa;
                case 83: goto L_0x00aa;
                case 84: goto L_0x0072;
                case 86: goto L_0x0047;
                case 90: goto L_0x003c;
                case 97: goto L_0x0222;
                case 99: goto L_0x01d4;
                case 104: goto L_0x01a7;
                case 108: goto L_0x0176;
                case 109: goto L_0x0136;
                case 113: goto L_0x00fa;
                case 115: goto L_0x00aa;
                case 116: goto L_0x0072;
                case 118: goto L_0x0047;
                case 122: goto L_0x003c;
                default: goto L_0x003b;
            }
        L_0x003b:
            return r9
        L_0x003c:
            r9.close()
            r1 = r13
            r2 = r1
            r3 = r14
        L_0x0042:
            r4 = r3
        L_0x0043:
            r18 = 0
            goto L_0x0272
        L_0x0047:
            float r4 = r0.n()
            boolean r5 = java.lang.Float.isNaN(r4)
            if (r5 == 0) goto L_0x0068
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0068:
            r5 = 118(0x76, float:1.65E-43)
            if (r12 != r5) goto L_0x006d
            float r4 = r4 + r3
        L_0x006d:
            r3 = r4
            r9.d(r1, r3)
            goto L_0x0042
        L_0x0072:
            float r5 = r1 * r6
            float r2 = r5 - r2
            float r6 = r6 * r3
            float r4 = r6 - r4
            float r5 = r0.n()
            float r6 = r0.d(r5)
            boolean r16 = java.lang.Float.isNaN(r6)
            if (r16 == 0) goto L_0x009e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x009e:
            r7 = 116(0x74, float:1.63E-43)
            if (r12 != r7) goto L_0x00a4
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x00a4:
            r1 = r5
            r3 = r6
            r9.e(r2, r4, r1, r3)
            goto L_0x0043
        L_0x00aa:
            float r5 = r1 * r6
            float r2 = r5 - r2
            float r6 = r6 * r3
            float r4 = r6 - r4
            float r5 = r0.n()
            float r6 = r0.d(r5)
            float r11 = r0.d(r6)
            float r16 = r0.d(r11)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 == 0) goto L_0x00de
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x00de:
            r7 = 115(0x73, float:1.61E-43)
            if (r12 != r7) goto L_0x00e7
            float r11 = r11 + r1
            float r16 = r16 + r3
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x00e7:
            r8 = r5
            r15 = r6
            r1 = r9
            r3 = r4
            r4 = r8
            r5 = r15
            r6 = r11
            r7 = r16
            r1.c(r2, r3, r4, r5, r6, r7)
        L_0x00f3:
            r2 = r8
            r1 = r11
            r4 = r15
            r3 = r16
            goto L_0x0043
        L_0x00fa:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            float r5 = r0.d(r4)
            float r6 = r0.d(r5)
            boolean r11 = java.lang.Float.isNaN(r6)
            if (r11 == 0) goto L_0x0127
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0127:
            r7 = 113(0x71, float:1.58E-43)
            if (r12 != r7) goto L_0x012f
            float r5 = r5 + r1
            float r6 = r6 + r3
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x012f:
            r1 = r5
            r3 = r6
            r9.e(r2, r4, r1, r3)
            goto L_0x0043
        L_0x0136:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            boolean r6 = java.lang.Float.isNaN(r4)
            if (r6 == 0) goto L_0x015b
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x015b:
            if (r12 != r10) goto L_0x0165
            boolean r6 = r9.i()
            if (r6 != 0) goto L_0x0165
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x0165:
            r1 = r2
            r3 = r4
            r9.b(r1, r3)
            if (r12 != r10) goto L_0x016d
            goto L_0x016f
        L_0x016d:
            r5 = 76
        L_0x016f:
            r2 = r1
            r13 = r2
            r4 = r3
            r14 = r4
            r12 = r5
            goto L_0x0043
        L_0x0176:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            boolean r6 = java.lang.Float.isNaN(r4)
            if (r6 == 0) goto L_0x019b
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x019b:
            if (r12 != r5) goto L_0x019f
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x019f:
            r1 = r2
            r3 = r4
            r9.d(r1, r3)
            r2 = r1
            goto L_0x0042
        L_0x01a7:
            float r2 = r0.n()
            boolean r5 = java.lang.Float.isNaN(r2)
            if (r5 == 0) goto L_0x01c8
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x01c8:
            r5 = 104(0x68, float:1.46E-43)
            if (r12 != r5) goto L_0x01cd
            float r2 = r2 + r1
        L_0x01cd:
            r1 = r2
            r9.d(r1, r3)
            r2 = r1
            goto L_0x0043
        L_0x01d4:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            float r5 = r0.d(r4)
            float r6 = r0.d(r5)
            float r11 = r0.d(r6)
            float r16 = r0.d(r11)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 == 0) goto L_0x0209
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        L_0x0209:
            r7 = 99
            if (r12 != r7) goto L_0x0214
            float r11 = r11 + r1
            float r16 = r16 + r3
            float r2 = r2 + r1
            float r4 = r4 + r3
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x0214:
            r3 = r4
            r8 = r5
            r15 = r6
            r1 = r9
            r4 = r8
            r5 = r15
            r6 = r11
            r7 = r16
            r1.c(r2, r3, r4, r5, r6, r7)
            goto L_0x00f3
        L_0x0222:
            float r2 = r0.n()
            float r4 = r0.d(r2)
            float r5 = r0.d(r4)
            java.lang.Float r6 = java.lang.Float.valueOf(r5)
            java.lang.Boolean r6 = r0.c(r6)
            java.lang.Boolean r11 = r0.c(r6)
            float r10 = r0.e(r11)
            float r17 = r0.d(r10)
            boolean r18 = java.lang.Float.isNaN(r17)
            if (r18 != 0) goto L_0x028e
            r18 = 0
            int r19 = (r2 > r18 ? 1 : (r2 == r18 ? 0 : -1))
            if (r19 < 0) goto L_0x028e
            int r19 = (r4 > r18 ? 1 : (r4 == r18 ? 0 : -1))
            if (r19 >= 0) goto L_0x0253
            goto L_0x028e
        L_0x0253:
            r7 = 97
            if (r12 != r7) goto L_0x025a
            float r10 = r10 + r1
            float r17 = r17 + r3
        L_0x025a:
            boolean r6 = r6.booleanValue()
            boolean r7 = r11.booleanValue()
            r1 = r9
            r3 = r4
            r4 = r5
            r5 = r6
            r6 = r7
            r7 = r10
            r8 = r17
            r1.f(r2, r3, r4, r5, r6, r7, r8)
            r1 = r10
            r2 = r1
            r3 = r17
            r4 = r3
        L_0x0272:
            r0.z()
            boolean r5 = r0.h()
            if (r5 == 0) goto L_0x027c
            return r9
        L_0x027c:
            boolean r5 = r0.i()
            if (r5 == 0) goto L_0x028a
            java.lang.Integer r5 = r0.l()
            int r12 = r5.intValue()
        L_0x028a:
            r10 = 109(0x6d, float:1.53E-43)
            goto L_0x002b
        L_0x028e:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            android.util.Log.e(r15, r0)
            return r9
        */
        throw new UnsupportedOperationException("Method not decompiled: a8.k.u0(java.lang.String):a8.g$w");
    }

    private void v(Attributes attributes) {
        l("<line>", new Object[0]);
        if (this.f41842b != null) {
            g.C6770q qVar = new g.C6770q();
            qVar.f41681a = this.f41841a;
            qVar.f41682b = this.f41842b;
            D(qVar, attributes);
            S(qVar, attributes);
            W(qVar, attributes);
            C(qVar, attributes);
            H(qVar, attributes);
            this.f41842b.a(qVar);
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    static e v0(String str) {
        e.b bVar;
        i iVar = new i(str);
        iVar.A();
        String r10 = iVar.r();
        if ("defer".equals(r10)) {
            iVar.A();
            r10 = iVar.r();
        }
        e.a a10 = b.a(r10);
        iVar.A();
        if (!iVar.h()) {
            String r11 = iVar.r();
            r11.hashCode();
            if (r11.equals("meet")) {
                bVar = e.b.meet;
            } else if (r11.equals("slice")) {
                bVar = e.b.slice;
            } else {
                throw new j("Invalid preserveAspectRatio definition: " + str);
            }
        } else {
            bVar = null;
        }
        return new e(a10, bVar);
    }

    private void w(Attributes attributes) {
        l("<linearGradient>", new Object[0]);
        if (this.f41842b != null) {
            g.M m10 = new g.M();
            m10.f41681a = this.f41841a;
            m10.f41682b = this.f41842b;
            D(m10, attributes);
            S(m10, attributes);
            F(m10, attributes);
            I(m10, attributes);
            this.f41842b.a(m10);
            this.f41842b = m10;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static void w0(g.P p10, String str) {
        p10.f41683o = v0(str);
    }

    private void x(Attributes attributes) {
        l("<marker>", new Object[0]);
        if (this.f41842b != null) {
            g.C6771r rVar = new g.C6771r();
            rVar.f41681a = this.f41841a;
            rVar.f41682b = this.f41842b;
            D(rVar, attributes);
            S(rVar, attributes);
            C(rVar, attributes);
            Y(rVar, attributes);
            J(rVar, attributes);
            this.f41842b.a(rVar);
            this.f41842b = rVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    /* access modifiers changed from: private */
    public Map<String, String> x0(i iVar) {
        HashMap hashMap = new HashMap();
        iVar.A();
        String s10 = iVar.s('=');
        while (s10 != null) {
            iVar.f('=');
            hashMap.put(s10, iVar.q());
            iVar.A();
            s10 = iVar.s('=');
        }
        return hashMap;
    }

    private void y(Attributes attributes) {
        l("<mask>", new Object[0]);
        if (this.f41842b != null) {
            g.C6772s sVar = new g.C6772s();
            sVar.f41681a = this.f41841a;
            sVar.f41682b = this.f41842b;
            D(sVar, attributes);
            S(sVar, attributes);
            C(sVar, attributes);
            K(sVar, attributes);
            this.f41842b.a(sVar);
            this.f41842b = sVar;
            return;
        }
        throw new j("Invalid document. Root element must be <svg>");
    }

    private static g.E.e y0(String str) {
        str.hashCode();
        char c10 = 65535;
        switch (str.hashCode()) {
            case -933002398:
                if (str.equals("optimizeQuality")) {
                    c10 = 0;
                    break;
                }
                break;
            case 3005871:
                if (str.equals("auto")) {
                    c10 = 1;
                    break;
                }
                break;
            case 362741610:
                if (str.equals("optimizeSpeed")) {
                    c10 = 2;
                    break;
                }
                break;
        }
        switch (c10) {
            case 0:
                return g.E.e.optimizeQuality;
            case 1:
                return g.E.e.auto;
            case 2:
                return g.E.e.optimizeSpeed;
            default:
                return null;
        }
    }

    private static Set<String> z0(String str) {
        i iVar = new i(str);
        HashSet hashSet = new HashSet();
        while (!iVar.h()) {
            String r10 = iVar.r();
            if (r10.startsWith("http://www.w3.org/TR/SVG11/feature#")) {
                hashSet.add(r10.substring(35));
            } else {
                hashSet.add("UNSUPPORTED");
            }
            iVar.A();
        }
        return hashSet;
    }

    /* access modifiers changed from: package-private */
    public g z(BufferedInputStream bufferedInputStream, boolean z10) {
        if (!bufferedInputStream.markSupported()) {
            bufferedInputStream = new BufferedInputStream(bufferedInputStream);
        }
        try {
            bufferedInputStream.mark(3);
            int read = bufferedInputStream.read() + (bufferedInputStream.read() << 8);
            bufferedInputStream.reset();
            if (read == 35615) {
                bufferedInputStream = new BufferedInputStream(new GZIPInputStream(bufferedInputStream));
            }
        } catch (IOException unused) {
        }
        try {
            bufferedInputStream.mark(RecyclerView.n.FLAG_APPEARED_IN_PRE_LAYOUT);
            L0(bufferedInputStream, z10);
            return this.f41841a;
        } finally {
            try {
                bufferedInputStream.close();
            } catch (IOException unused2) {
                Log.e("SVGParser", "Exception thrown closing input stream");
            }
        }
    }
}
